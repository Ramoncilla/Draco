
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Oct 23 20:38:09 CST 2018
//----------------------------------------------------

package D_Mas_Mas.Analizador;

import Arbol.Expresion.*;
import Arbol.Importar;
import Arbol.*;
import Arbol.Funciones.*;
import Arbol.Sentencias.*;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Tue Oct 23 20:38:09 CST 2018
  */
public class ParserDMM extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserDMM() {super();}

  /** Constructor which sets the default scanner. */
  public ParserDMM(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\013" +
    "\004\000\002\013\006\000\002\013\010\000\002\015\006" +
    "\000\002\015\004\000\002\015\007\000\002\015\005\000" +
    "\002\014\005\000\002\014\004\000\002\014\004\000\002" +
    "\023\003\000\002\023\003\000\002\023\005\000\002\023" +
    "\005\000\002\024\004\000\002\016\003\000\002\016\004" +
    "\000\002\017\005\000\002\020\003\000\002\020\005\000" +
    "\002\005\005\000\002\021\003\000\002\021\005\000\002" +
    "\060\005\000\002\022\003\000\002\022\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\005\000\002\062\005\000\002\062\005\000\002" +
    "\062\005\000\002\062\005\000\002\062\004\000\002\062" +
    "\004\000\002\062\004\000\002\062\005\000\002\062\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\005\000" +
    "\002\062\005\000\002\062\005\000\002\062\005\000\002" +
    "\062\004\000\002\062\005\000\002\062\003\000\002\050" +
    "\005\000\002\050\004\000\002\051\004\000\002\025\007" +
    "\000\002\026\004\000\002\026\005\000\002\027\003\000" +
    "\002\027\004\000\002\027\004\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\004\000\002\030\003\000" +
    "\002\030\004\000\002\031\007\000\002\032\004\000\002" +
    "\033\010\000\002\034\003\000\002\034\004\000\002\035" +
    "\003\000\002\035\004\000\002\035\004\000\002\035\005" +
    "\000\002\036\007\000\002\063\003\000\002\065\002\000" +
    "\002\063\005\000\002\037\012\000\002\040\004\000\002" +
    "\041\004\000\002\042\004\000\002\042\005\000\002\043" +
    "\007\000\002\011\007\000\002\044\007\000\002\044\006" +
    "\000\002\045\003\000\002\045\004\000\002\010\006\000" +
    "\002\010\006\000\002\007\006\000\002\064\004\000\002" +
    "\046\003\000\002\046\005\000\002\047\004\000\002\047" +
    "\005\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\053\015\000" +
    "\002\054\016\000\002\055\016\000\002\056\014\000\002" +
    "\057\020" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\024\004\005\005\016\006\010\007\004\010" +
    "\021\056\024\063\020\065\012\066\011\001\002\000\004" +
    "\056\ufff5\001\002\000\004\056\ufff8\001\002\000\026\002" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\056\ufffa" +
    "\063\ufffa\065\ufffa\066\ufffa\001\002\000\006\020\u011f\030" +
    "\u011e\001\002\000\004\056\ufff6\001\002\000\006\056\u0118" +
    "\067\u0119\001\002\000\004\056\u0111\001\002\000\026\002" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\056\uffff" +
    "\063\uffff\065\uffff\066\uffff\001\002\000\026\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\056\ufffd\063\ufffd" +
    "\065\ufffd\066\ufffd\001\002\000\026\002\000\004\005\005" +
    "\016\006\010\007\004\010\021\056\024\063\020\065\012" +
    "\066\011\001\002\000\004\056\ufff7\001\002\000\004\056" +
    "\034\001\002\000\004\013\030\001\002\000\004\056\ufff4" +
    "\001\002\000\026\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\056\ufffb\063\ufffb\065\ufffb\066\ufffb\001\002" +
    "\000\004\002\027\001\002\000\004\056\ufff3\001\002\000" +
    "\026\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\056\ufffc\063\ufffc\065\ufffc\066\ufffc\001\002\000\026\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\056\ufff9" +
    "\063\ufff9\065\ufff9\066\ufff9\001\002\000\004\002\001\001" +
    "\002\000\004\055\031\001\002\000\004\014\032\001\002" +
    "\000\004\020\033\001\002\000\026\002\uff96\004\uff96\005" +
    "\uff96\006\uff96\007\uff96\010\uff96\056\uff96\063\uff96\065\uff96" +
    "\066\uff96\001\002\000\014\013\041\015\036\020\uffee\030" +
    "\uffee\054\037\001\002\000\010\015\036\020\u010d\054\u010c" +
    "\001\002\000\026\011\063\013\134\035\105\052\124\053" +
    "\117\055\135\056\141\057\122\060\104\074\074\001\002" +
    "\000\026\011\063\013\134\035\105\052\124\053\117\055" +
    "\135\056\141\057\122\060\104\074\074\001\002\000\004" +
    "\011\054\001\002\000\020\004\005\005\016\006\010\007" +
    "\004\010\021\014\045\056\024\001\002\000\060\012\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\030\uffe3\031" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051" +
    "\uffe3\054\uffe3\061\uffe3\001\002\000\006\014\uff8d\030\uff8d" +
    "\001\002\000\004\056\052\001\002\000\004\011\uff8b\001" +
    "\002\000\006\014\050\030\047\001\002\000\016\004\005" +
    "\005\016\006\010\007\004\010\021\056\024\001\002\000" +
    "\004\011\uff8a\001\002\000\006\014\uff8c\030\uff8c\001\002" +
    "\000\006\014\uff8e\030\uff8e\001\002\000\026\002\uff90\004" +
    "\uff90\005\uff90\006\uff90\007\uff90\010\uff90\056\uff90\063\uff90" +
    "\065\uff90\066\uff90\001\002\000\072\004\005\005\016\006" +
    "\073\007\004\010\021\011\063\012\056\013\134\021\076" +
    "\023\110\024\100\025\067\026\060\027\130\035\105\052" +
    "\124\053\117\055\135\056\072\057\122\060\104\062\055" +
    "\065\012\070\112\071\107\072\102\073\125\074\074\001" +
    "\002\000\004\020\u0108\001\002\000\102\002\uffba\004\uffba" +
    "\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\035\uffba\052\uffba\053\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\062\uffba\063\uffba\065\uffba\066\uffba\070\uffba" +
    "\071\uffba\072\uffba\073\uffba\074\uffba\001\002\000\072\004" +
    "\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86" +
    "\013\uff86\021\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027" +
    "\uff86\035\uff86\052\uff86\053\uff86\055\uff86\056\uff86\057\uff86" +
    "\060\uff86\062\uff86\065\uff86\070\uff86\071\uff86\072\uff86\073" +
    "\uff86\074\uff86\001\002\000\004\013\u0104\001\002\000\072" +
    "\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\021\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\035\uffaf\052\uffaf\053\uffaf\055\uffaf\056\uffaf\057" +
    "\uffaf\060\uffaf\062\uffaf\065\uffaf\070\uffaf\071\uffaf\072\uffaf" +
    "\073\uffaf\074\uffaf\001\002\000\072\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\021\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\035\uffb5\052" +
    "\uffb5\053\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\062\uffb5" +
    "\065\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\001" +
    "\002\000\004\011\376\001\002\000\036\034\171\035\162" +
    "\036\157\037\165\040\154\042\164\043\170\044\166\045" +
    "\155\046\156\047\160\050\163\051\161\061\167\001\002" +
    "\000\072\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011" +
    "\uffab\012\uffab\013\uffab\021\uffab\023\uffab\024\uffab\025\uffab" +
    "\026\uffab\027\uffab\035\uffab\052\uffab\053\uffab\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\062\uffab\065\uffab\070\uffab\071\uffab" +
    "\072\uffab\073\uffab\074\uffab\001\002\000\072\004\005\005" +
    "\016\006\073\007\004\010\021\011\063\012\372\013\134" +
    "\021\076\023\110\024\100\025\067\026\060\027\130\035" +
    "\105\052\124\053\117\055\135\056\072\057\122\060\104" +
    "\062\055\065\012\070\112\071\107\072\102\073\125\074" +
    "\074\001\002\000\004\020\371\001\002\000\072\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013" +
    "\uffae\021\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\035\uffae\052\uffae\053\uffae\055\uffae\056\uffae\057\uffae\060" +
    "\uffae\062\uffae\065\uffae\070\uffae\071\uffae\072\uffae\073\uffae" +
    "\074\uffae\001\002\000\004\020\370\001\002\000\054\013" +
    "\146\015\036\031\uffe8\032\367\033\366\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\054\uffe8\056\ufff3" +
    "\061\uffe8\001\002\000\006\013\355\056\ufff6\001\002\000" +
    "\052\012\uffd3\014\uffd3\016\uffd3\017\uffd3\020\uffd3\030\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\061\uffd3\001\002\000\072\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\021\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\035\uffb4\052\uffb4\053" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\062\uffb4\065\uffb4" +
    "\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\001\002\000" +
    "\004\013\351\001\002\000\052\012\uffd8\014\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\030\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\061\uffd8\001\002\000\004\013" +
    "\345\001\002\000\072\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\021\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\035\uffb1\052\uffb1\053\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\062\uffb1\065\uffb1\070" +
    "\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\001\002\000\004" +
    "\013\332\001\002\000\074\004\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\021\uffa4\022\316" +
    "\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\035\uffa4\052" +
    "\uffa4\053\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\062\uffa4" +
    "\065\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\001" +
    "\002\000\052\012\uffd5\014\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\030\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\061\uffd5\001\002\000\026\011\063\013\134\035" +
    "\105\052\124\053\117\055\135\056\141\057\122\060\104" +
    "\074\074\001\002\000\072\004\uff88\005\uff88\006\uff88\007" +
    "\uff88\010\uff88\011\uff88\012\uff88\013\uff88\021\uff88\023\uff88" +
    "\024\uff88\025\uff88\026\uff88\027\uff88\035\uff88\052\uff88\053" +
    "\uff88\055\uff88\056\uff88\057\uff88\060\uff88\062\uff88\065\uff88" +
    "\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88\001\002\000" +
    "\004\013\302\001\002\000\004\013\262\001\002\000\072" +
    "\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012" +
    "\uff87\013\uff87\021\uff87\023\uff87\024\uff87\025\uff87\026\uff87" +
    "\027\uff87\035\uff87\052\uff87\053\uff87\055\uff87\056\uff87\057" +
    "\uff87\060\uff87\062\uff87\065\uff87\070\uff87\071\uff87\072\uff87" +
    "\073\uff87\074\uff87\001\002\000\004\013\250\001\002\000" +
    "\004\056\247\001\002\000\004\020\246\001\002\000\056" +
    "\012\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7\030\uffe7\031" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\054\uffe7\061\uffe7\001\002\000\072\004\uffb8\005\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\021" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\035\uffb8" +
    "\052\uffb8\053\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\062" +
    "\uffb8\065\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8" +
    "\001\002\000\052\012\uffd2\014\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\030\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\061\uffd2\001\002\000\072\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\021" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\035\uffb2" +
    "\052\uffb2\053\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\062" +
    "\uffb2\065\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2" +
    "\001\002\000\072\004\uff89\005\uff89\006\uff89\007\uff89\010" +
    "\uff89\011\uff89\012\uff89\013\uff89\021\uff89\023\uff89\024\uff89" +
    "\025\uff89\026\uff89\027\uff89\035\uff89\052\uff89\053\uff89\055" +
    "\uff89\056\uff89\057\uff89\060\uff89\062\uff89\065\uff89\070\uff89" +
    "\071\uff89\072\uff89\073\uff89\074\uff89\001\002\000\052\012" +
    "\uffd4\014\uffd4\016\uffd4\017\uffd4\020\uffd4\030\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\061\uffd4" +
    "\001\002\000\042\031\217\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\054\244\061\uffd7\001\002\000" +
    "\026\011\063\013\134\035\105\052\124\053\117\055\135" +
    "\056\141\057\122\060\104\074\074\001\002\000\004\013" +
    "\226\001\002\000\072\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\021\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\027\uffad\035\uffad\052\uffad\053\uffad" +
    "\055\uffad\056\uffad\057\uffad\060\uffad\062\uffad\065\uffad\070" +
    "\uffad\071\uffad\072\uffad\073\uffad\074\uffad\001\002\000\040" +
    "\020\225\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\061\uffbf\001\002\000\030\011\063\013\134\020" +
    "\222\035\105\052\124\053\117\055\135\056\141\057\122" +
    "\060\104\074\074\001\002\000\072\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\021\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\035\uffb3\052" +
    "\uffb3\053\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\062\uffb3" +
    "\065\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\001" +
    "\002\000\072\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\011\uffb0\012\uffb0\013\uffb0\021\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\035\uffb0\052\uffb0\053\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\062\uffb0\065\uffb0\070\uffb0\071" +
    "\uffb0\072\uffb0\073\uffb0\074\uffb0\001\002\000\072\004\uff85" +
    "\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013" +
    "\uff85\021\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85" +
    "\035\uff85\052\uff85\053\uff85\055\uff85\056\uff85\057\uff85\060" +
    "\uff85\062\uff85\065\uff85\070\uff85\071\uff85\072\uff85\073\uff85" +
    "\074\uff85\001\002\000\026\011\063\013\134\035\105\052" +
    "\124\053\117\055\135\056\141\057\122\060\104\074\074" +
    "\001\002\000\052\012\uffd6\014\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\030\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\051\uffd6\061\uffd6\001\002\000\054\012\uffd7\014\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\030\uffd7\031\217\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\061\uffd7\001" +
    "\002\000\052\012\uffbf\014\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\030\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\061\uffbf\001\002\000\036\014\216\034\171\035" +
    "\162\036\157\037\165\040\154\042\164\043\170\044\166" +
    "\045\155\046\156\047\160\050\163\051\161\001\002\000" +
    "\064\012\uffe8\013\146\014\uffe8\015\036\016\uffe8\017\uffe8" +
    "\020\uffe8\030\uffe8\031\uffe8\032\145\033\143\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\061\uffe8\001" +
    "\002\000\060\012\uffe4\014\uffe4\015\036\016\uffe4\017\uffe4" +
    "\020\uffe4\030\uffe4\031\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\054\uffe4\061\uffe4\001\002\000" +
    "\052\012\uffcb\014\uffcb\016\uffcb\017\uffcb\020\uffcb\030\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\061\uffcb\001\002\000\052\012\uffbc\014\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\030\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\050\uffbc\051\uffbc\061\uffbc\001\002\000\052\012\uffcc" +
    "\014\uffcc\016\uffcc\017\uffcc\020\uffcc\030\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\061\uffcc\001" +
    "\002\000\030\011\063\013\134\014\147\035\105\052\124" +
    "\053\117\055\135\056\141\057\122\060\104\074\074\001" +
    "\002\000\052\012\uffbd\014\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\030\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\061\uffbd\001\002\000\006\014\213\030\212\001" +
    "\002\000\014\012\uffda\014\uffda\016\uffda\020\uffda\030\uffda" +
    "\001\002\000\050\012\uffd9\014\uffd9\016\uffd9\020\uffd9\030" +
    "\uffd9\034\171\035\162\036\157\037\165\040\154\042\164" +
    "\043\170\044\166\045\155\046\156\047\160\050\163\051" +
    "\161\061\167\001\002\000\010\012\uffe0\014\uffe0\030\uffe0" +
    "\001\002\000\026\011\063\013\134\035\105\052\124\053" +
    "\117\055\135\056\141\057\122\060\104\074\074\001\002" +
    "\000\026\011\063\013\134\035\105\052\124\053\117\055" +
    "\135\056\141\057\122\060\104\074\074\001\002\000\026" +
    "\011\063\013\134\035\105\052\124\053\117\055\135\056" +
    "\141\057\122\060\104\074\074\001\002\000\026\011\063" +
    "\013\134\035\105\052\124\053\117\055\135\056\141\057" +
    "\122\060\104\074\074\001\002\000\026\011\063\013\134" +
    "\035\105\052\124\053\117\055\135\056\141\057\122\060" +
    "\104\074\074\001\002\000\026\011\063\013\134\035\105" +
    "\052\124\053\117\055\135\056\141\057\122\060\104\074" +
    "\074\001\002\000\026\011\063\013\134\035\105\052\124" +
    "\053\117\055\135\056\141\057\122\060\104\074\074\001" +
    "\002\000\026\011\063\013\134\035\105\052\124\053\117" +
    "\055\135\056\141\057\122\060\104\074\074\001\002\000" +
    "\026\011\063\013\134\035\105\052\124\053\117\055\135" +
    "\056\141\057\122\060\104\074\074\001\002\000\026\011" +
    "\063\013\134\035\105\052\124\053\117\055\135\056\141" +
    "\057\122\060\104\074\074\001\002\000\026\011\063\013" +
    "\134\035\105\052\124\053\117\055\135\056\141\057\122" +
    "\060\104\074\074\001\002\000\026\011\063\013\134\035" +
    "\105\052\124\053\117\055\135\056\141\057\122\060\104" +
    "\074\074\001\002\000\026\011\063\013\134\035\105\052" +
    "\124\053\117\055\135\056\141\057\122\060\104\074\074" +
    "\001\002\000\026\011\063\013\134\035\105\052\124\053" +
    "\117\055\135\056\141\057\122\060\104\074\074\001\002" +
    "\000\052\012\uffd1\014\uffd1\016\uffd1\017\uffd1\020\uffd1\030" +
    "\uffd1\034\uffd1\035\uffd1\036\157\037\165\040\154\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\061\uffd1\001\002\000\052\012\uffc8\014\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\030\uffc8\034\171\035\162\036\157\037" +
    "\165\040\154\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\061\uffc8\001\002\000\036\017" +
    "\175\034\171\035\162\036\157\037\165\040\154\042\164" +
    "\043\170\044\166\045\155\046\156\047\160\050\163\051" +
    "\161\001\002\000\026\011\063\013\134\035\105\052\124" +
    "\053\117\055\135\056\141\057\122\060\104\074\074\001" +
    "\002\000\046\012\uffbb\014\uffbb\016\uffbb\020\uffbb\030\uffbb" +
    "\034\171\035\162\036\157\037\165\040\154\042\164\043" +
    "\170\044\166\045\155\046\156\047\160\050\163\051\161" +
    "\001\002\000\052\012\uffc7\014\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\030\uffc7\034\171\035\162\036\157\037\165\040\154" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\061\uffc7\001\002\000\052\012\uffce\014\uffce" +
    "\016\uffce\017\uffce\020\uffce\030\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\154\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\061\uffce\001\002\000" +
    "\052\012\uffc9\014\uffc9\016\uffc9\017\uffc9\020\uffc9\030\uffc9" +
    "\034\171\035\162\036\157\037\165\040\154\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\061\uffc9\001\002\000\052\012\uffc3\014\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\030\uffc3\034\171\035\162\036\157\037\165" +
    "\040\154\042\164\043\170\044\166\045\155\046\156\047" +
    "\160\050\uffc3\051\uffc3\061\uffc3\001\002\000\052\012\uffd0" +
    "\014\uffd0\016\uffd0\017\uffd0\020\uffd0\030\uffd0\034\uffd0\035" +
    "\uffd0\036\157\037\165\040\154\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\061\uffd0\001" +
    "\002\000\052\012\uffc2\014\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\030\uffc2\034\171\035\162\036\157\037\165\040\154\042" +
    "\164\043\170\044\166\045\155\046\156\047\160\050\163" +
    "\051\uffc2\061\uffc2\001\002\000\052\012\uffc4\014\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\030\uffc4\034\171\035\162\036\157" +
    "\037\165\040\154\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\061\uffc4\001\002\000\052" +
    "\012\uffcf\014\uffcf\016\uffcf\017\uffcf\020\uffcf\030\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\154\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\061" +
    "\uffcf\001\002\000\052\012\uffc5\014\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\030\uffc5\034\171\035\162\036\157\037\165\040" +
    "\154\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\061\uffc5\001\002\000\052\012\uffc6\014" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\030\uffc6\034\171\035\162" +
    "\036\157\037\165\040\154\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\061\uffc6\001\002" +
    "\000\052\012\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd\030" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\154\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\061\uffcd\001\002\000\026\011\063\013\134\035\105" +
    "\052\124\053\117\055\135\056\141\057\122\060\104\074" +
    "\074\001\002\000\052\012\uffbe\014\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\030\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\061\uffbe\001\002\000\010\012\uffdf\014" +
    "\uffdf\030\uffdf\001\002\000\060\012\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\030\uffe2\031\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\054\uffe2\061" +
    "\uffe2\001\002\000\052\012\uffc0\014\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\030\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\061\uffc0\001\002\000\004\056\220\001" +
    "\002\000\060\012\uffe6\014\uffe6\015\036\016\uffe6\017\uffe6" +
    "\020\uffe6\030\uffe6\031\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\054\uffe6\061\uffe6\001\002\000" +
    "\056\012\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5\030\uffe5" +
    "\031\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\054\uffe5\061\uffe5\001\002\000\072\004\uff99\005" +
    "\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99" +
    "\021\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\035" +
    "\uff99\052\uff99\053\uff99\055\uff99\056\uff99\057\uff99\060\uff99" +
    "\062\uff99\065\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074" +
    "\uff99\001\002\000\004\020\224\001\002\000\072\004\uff98" +
    "\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013" +
    "\uff98\021\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\035\uff98\052\uff98\053\uff98\055\uff98\056\uff98\057\uff98\060" +
    "\uff98\062\uff98\065\uff98\070\uff98\071\uff98\072\uff98\073\uff98" +
    "\074\uff98\001\002\000\072\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\021\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\035\uffac\052\uffac\053" +
    "\uffac\055\uffac\056\uffac\057\uffac\060\uffac\062\uffac\065\uffac" +
    "\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\001\002\000" +
    "\026\011\063\013\134\035\105\052\124\053\117\055\135" +
    "\056\141\057\122\060\104\074\074\001\002\000\004\030" +
    "\230\001\002\000\026\011\063\013\134\035\105\052\124" +
    "\053\117\055\135\056\141\057\122\060\104\074\074\001" +
    "\002\000\004\030\232\001\002\000\026\011\063\013\134" +
    "\035\105\052\124\053\117\055\135\056\141\057\122\060" +
    "\104\074\074\001\002\000\004\030\234\001\002\000\026" +
    "\011\063\013\134\035\105\052\124\053\117\055\135\056" +
    "\141\057\122\060\104\074\074\001\002\000\004\030\236" +
    "\001\002\000\026\011\063\013\134\035\105\052\124\053" +
    "\117\055\135\056\141\057\122\060\104\074\074\001\002" +
    "\000\004\030\240\001\002\000\026\011\063\013\134\035" +
    "\105\052\124\053\117\055\135\056\141\057\122\060\104" +
    "\074\074\001\002\000\004\014\242\001\002\000\072\004" +
    "\uff80\005\uff80\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80" +
    "\013\uff80\021\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027" +
    "\uff80\035\uff80\052\uff80\053\uff80\055\uff80\056\uff80\057\uff80" +
    "\060\uff80\062\uff80\065\uff80\070\uff80\071\uff80\072\uff80\073" +
    "\uff80\074\uff80\001\002\000\052\012\uffc1\014\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\030\uffc1\034\171\035\162\036\157\037" +
    "\165\040\154\042\164\043\170\044\166\045\155\046\156" +
    "\047\160\050\uffc1\051\uffc1\061\uffc1\001\002\000\026\011" +
    "\063\013\134\035\105\052\124\053\117\055\135\056\141" +
    "\057\122\060\104\074\074\001\002\000\006\014\uffeb\020" +
    "\uffeb\001\002\000\072\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\021\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\035\uffb7\052\uffb7\053\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\060\uffb7\062\uffb7\065\uffb7\070" +
    "\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\001\002\000\012" +
    "\015\036\020\uffee\030\uffee\054\037\001\002\000\026\011" +
    "\063\013\134\035\105\052\124\053\117\055\135\056\141" +
    "\057\122\060\104\074\074\001\002\000\004\030\252\001" +
    "\002\000\026\011\063\013\134\035\105\052\124\053\117" +
    "\055\135\056\141\057\122\060\104\074\074\001\002\000" +
    "\004\030\254\001\002\000\026\011\063\013\134\035\105" +
    "\052\124\053\117\055\135\056\141\057\122\060\104\074" +
    "\074\001\002\000\004\030\256\001\002\000\026\011\063" +
    "\013\134\035\105\052\124\053\117\055\135\056\141\057" +
    "\122\060\104\074\074\001\002\000\004\014\260\001\002" +
    "\000\004\020\261\001\002\000\072\004\uff84\005\uff84\006" +
    "\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\021\uff84" +
    "\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\035\uff84\052" +
    "\uff84\053\uff84\055\uff84\056\uff84\057\uff84\060\uff84\062\uff84" +
    "\065\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\001" +
    "\002\000\016\004\005\005\016\006\010\007\004\010\021" +
    "\056\267\001\002\000\006\031\217\054\244\001\002\000" +
    "\026\011\uff9f\013\uff9f\035\uff9f\052\uff9f\053\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\074\uff9f\001\002\000\026\011" +
    "\063\013\134\035\105\052\124\053\117\055\135\056\141" +
    "\057\122\060\104\074\074\001\002\000\004\020\uff9e\001" +
    "\002\000\016\015\036\031\uffe8\032\271\033\270\054\uffe8" +
    "\056\ufff3\001\002\000\006\014\uffe9\020\uffe9\001\002\000" +
    "\006\014\uffea\020\uffea\001\002\000\004\020\273\001\002" +
    "\000\026\011\uff9d\013\uff9d\035\uff9d\052\uff9d\053\uff9d\055" +
    "\uff9d\056\uff9d\057\uff9d\060\uff9d\074\uff9d\001\002\000\004" +
    "\020\275\001\002\000\004\056\277\001\002\000\004\014" +
    "\300\001\002\000\014\015\036\031\uffe8\032\271\033\270" +
    "\054\uffe8\001\002\000\004\011\054\001\002\000\072\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\021\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027" +
    "\uff9c\035\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c\057\uff9c" +
    "\060\uff9c\062\uff9c\065\uff9c\070\uff9c\071\uff9c\072\uff9c\073" +
    "\uff9c\074\uff9c\001\002\000\026\011\063\013\134\035\105" +
    "\052\124\053\117\055\135\056\141\057\122\060\104\074" +
    "\074\001\002\000\004\030\304\001\002\000\026\011\063" +
    "\013\134\035\105\052\124\053\117\055\135\056\141\057" +
    "\122\060\104\074\074\001\002\000\004\030\306\001\002" +
    "\000\026\011\063\013\134\035\105\052\124\053\117\055" +
    "\135\056\141\057\122\060\104\074\074\001\002\000\004" +
    "\030\310\001\002\000\026\011\063\013\134\035\105\052" +
    "\124\053\117\055\135\056\141\057\122\060\104\074\074" +
    "\001\002\000\004\030\312\001\002\000\026\011\063\013" +
    "\134\035\105\052\124\053\117\055\135\056\141\057\122" +
    "\060\104\074\074\001\002\000\004\014\314\001\002\000" +
    "\072\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83" +
    "\012\uff83\013\uff83\021\uff83\023\uff83\024\uff83\025\uff83\026" +
    "\uff83\027\uff83\035\uff83\052\uff83\053\uff83\055\uff83\056\uff83" +
    "\057\uff83\060\uff83\062\uff83\065\uff83\070\uff83\071\uff83\072" +
    "\uff83\073\uff83\074\uff83\001\002\000\052\012\uffca\014\uffca" +
    "\016\uffca\017\uffca\020\uffca\030\uffca\034\uffca\035\uffca\036" +
    "\157\037\165\040\154\042\uffca\043\uffca\044\uffca\045\uffca" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\061\uffca\001\002\000" +
    "\006\011\054\021\324\001\002\000\074\004\uffa6\005\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6" +
    "\035\uffa6\052\uffa6\053\uffa6\055\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\062\uffa6\065\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6" +
    "\074\uffa6\001\002\000\074\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\021\uffa2\022\316" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\035\uffa2\052" +
    "\uffa2\053\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\062\uffa2" +
    "\065\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\001" +
    "\002\000\072\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\021\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\035\uffa3\052\uffa3\053\uffa3\055\uffa3" +
    "\056\uffa3\057\uffa3\060\uffa3\062\uffa3\065\uffa3\070\uffa3\071" +
    "\uffa3\072\uffa3\073\uffa3\074\uffa3\001\002\000\074\004\uffa5" +
    "\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5" +
    "\027\uffa5\035\uffa5\052\uffa5\053\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\062\uffa5\065\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\073\uffa5\074\uffa5\001\002\000\072\004\uffa1\005\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\021\uffa1" +
    "\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\035\uffa1\052" +
    "\uffa1\053\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\062\uffa1" +
    "\065\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\001" +
    "\002\000\004\013\326\001\002\000\072\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\021" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\035\uffa8" +
    "\052\uffa8\053\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\062" +
    "\uffa8\065\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8" +
    "\001\002\000\026\011\063\013\134\035\105\052\124\053" +
    "\117\055\135\056\141\057\122\060\104\074\074\001\002" +
    "\000\004\014\330\001\002\000\004\011\054\001\002\000" +
    "\074\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\035\uffa7\052\uffa7\053\uffa7\055\uffa7" +
    "\056\uffa7\057\uffa7\060\uffa7\062\uffa7\065\uffa7\070\uffa7\071" +
    "\uffa7\072\uffa7\073\uffa7\074\uffa7\001\002\000\026\011\063" +
    "\013\134\035\105\052\124\053\117\055\135\056\141\057" +
    "\122\060\104\074\074\001\002\000\004\030\334\001\002" +
    "\000\026\011\063\013\134\035\105\052\124\053\117\055" +
    "\135\056\141\057\122\060\104\074\074\001\002\000\004" +
    "\030\336\001\002\000\026\011\063\013\134\035\105\052" +
    "\124\053\117\055\135\056\141\057\122\060\104\074\074" +
    "\001\002\000\004\030\340\001\002\000\026\011\063\013" +
    "\134\035\105\052\124\053\117\055\135\056\141\057\122" +
    "\060\104\074\074\001\002\000\004\030\342\001\002\000" +
    "\026\011\063\013\134\035\105\052\124\053\117\055\135" +
    "\056\141\057\122\060\104\074\074\001\002\000\004\014" +
    "\344\001\002\000\072\004\uff82\005\uff82\006\uff82\007\uff82" +
    "\010\uff82\011\uff82\012\uff82\013\uff82\021\uff82\023\uff82\024" +
    "\uff82\025\uff82\026\uff82\027\uff82\035\uff82\052\uff82\053\uff82" +
    "\055\uff82\056\uff82\057\uff82\060\uff82\062\uff82\065\uff82\070" +
    "\uff82\071\uff82\072\uff82\073\uff82\074\uff82\001\002\000\026" +
    "\011\063\013\134\035\105\052\124\053\117\055\135\056" +
    "\141\057\122\060\104\074\074\001\002\000\004\014\347" +
    "\001\002\000\004\011\054\001\002\000\072\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\021\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\035" +
    "\uffa0\052\uffa0\053\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\062\uffa0\065\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074" +
    "\uffa0\001\002\000\026\011\063\013\134\035\105\052\124" +
    "\053\117\055\135\056\141\057\122\060\104\074\074\001" +
    "\002\000\004\014\353\001\002\000\004\011\054\001\002" +
    "\000\074\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9" +
    "\025\uffa9\026\uffa9\027\uffa9\035\uffa9\052\uffa9\053\uffa9\055" +
    "\uffa9\056\uffa9\057\uffa9\060\uffa9\062\uffa9\065\uffa9\070\uffa9" +
    "\071\uffa9\072\uffa9\073\uffa9\074\uffa9\001\002\000\026\011" +
    "\063\013\134\035\105\052\124\053\117\055\135\056\141" +
    "\057\122\060\104\074\074\001\002\000\004\030\357\001" +
    "\002\000\026\011\063\013\134\035\105\052\124\053\117" +
    "\055\135\056\141\057\122\060\104\074\074\001\002\000" +
    "\004\030\361\001\002\000\026\011\063\013\134\035\105" +
    "\052\124\053\117\055\135\056\141\057\122\060\104\074" +
    "\074\001\002\000\004\030\363\001\002\000\026\011\063" +
    "\013\134\035\105\052\124\053\117\055\135\056\141\057" +
    "\122\060\104\074\074\001\002\000\004\014\365\001\002" +
    "\000\072\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81\011" +
    "\uff81\012\uff81\013\uff81\021\uff81\023\uff81\024\uff81\025\uff81" +
    "\026\uff81\027\uff81\035\uff81\052\uff81\053\uff81\055\uff81\056" +
    "\uff81\057\uff81\060\uff81\062\uff81\065\uff81\070\uff81\071\uff81" +
    "\072\uff81\073\uff81\074\uff81\001\002\000\040\020\uffe9\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\061" +
    "\uffcb\001\002\000\040\020\uffea\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\061\uffcc\001\002\000\072" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\021\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\035\uffb6\052\uffb6\053\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\062\uffb6\065\uffb6\070\uffb6\071\uffb6\072\uffb6" +
    "\073\uffb6\074\uffb6\001\002\000\072\004\uff9b\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\021\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\035\uff9b\052" +
    "\uff9b\053\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\062\uff9b" +
    "\065\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\001" +
    "\002\000\102\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\013\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\035\uffb9\052\uffb9" +
    "\053\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\062\uffb9\063" +
    "\uffb9\065\uffb9\066\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9" +
    "\074\uffb9\001\002\000\072\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\021\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\035\uffaa\052\uffaa\053" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\062\uffaa\065\uffaa" +
    "\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\001\002\000" +
    "\006\012\uffdd\030\uffdd\001\002\000\006\012\u0101\030\u0102" +
    "\001\002\000\026\011\063\013\134\035\105\052\124\053" +
    "\117\055\135\056\141\057\122\060\104\074\074\001\002" +
    "\000\006\012\u0100\030\212\001\002\000\006\012\uffde\030" +
    "\uffde\001\002\000\052\012\uffdb\014\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\030\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\061\uffdb\001\002\000\004\011\376\001" +
    "\002\000\006\012\uffdc\030\uffdc\001\002\000\026\011\063" +
    "\013\134\035\105\052\124\053\117\055\135\056\141\057" +
    "\122\060\104\074\074\001\002\000\004\014\u0106\001\002" +
    "\000\004\020\u0107\001\002\000\072\004\uff97\005\uff97\006" +
    "\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\021\uff97" +
    "\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\035\uff97\052" +
    "\uff97\053\uff97\055\uff97\056\uff97\057\uff97\060\uff97\062\uff97" +
    "\065\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97\001" +
    "\002\000\072\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\021\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\026\uff9a\027\uff9a\035\uff9a\052\uff9a\053\uff9a\055\uff9a" +
    "\056\uff9a\057\uff9a\060\uff9a\062\uff9a\065\uff9a\070\uff9a\071" +
    "\uff9a\072\uff9a\073\uff9a\074\uff9a\001\002\000\006\020\uffef" +
    "\030\uffef\001\002\000\004\016\u010b\001\002\000\060\012" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\030\uffe1" +
    "\031\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\054\uffe1\061\uffe1\001\002\000\026\011\063\013" +
    "\134\035\105\052\124\053\117\055\135\056\141\057\122" +
    "\060\104\074\074\001\002\000\100\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\021\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\035" +
    "\ufff1\052\ufff1\053\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\062\ufff1\063\ufff1\065\ufff1\066\ufff1\070\ufff1\071\ufff1\072" +
    "\ufff1\073\ufff1\074\ufff1\001\002\000\004\020\u010f\001\002" +
    "\000\100\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\021\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\035\ufff0\052\ufff0\053\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\060\ufff0\062\ufff0\063\ufff0\065\ufff0" +
    "\066\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\001" +
    "\002\000\026\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\056\ufffe\063\ufffe\065\ufffe\066\ufffe\001\002\000" +
    "\004\011\u0112\001\002\000\020\004\005\005\016\006\010" +
    "\007\004\010\021\012\u0114\056\024\001\002\000\020\004" +
    "\uff93\005\uff93\006\uff93\007\uff93\010\uff93\012\uff93\056\uff93" +
    "\001\002\000\100\002\uff94\004\uff94\005\uff94\006\uff94\007" +
    "\uff94\010\uff94\011\uff94\012\uff94\013\uff94\021\uff94\023\uff94" +
    "\024\uff94\025\uff94\026\uff94\027\uff94\035\uff94\052\uff94\053" +
    "\uff94\055\uff94\056\uff94\057\uff94\060\uff94\062\uff94\063\uff94" +
    "\065\uff94\066\uff94\070\uff94\071\uff94\072\uff94\073\uff94\074" +
    "\uff94\001\002\000\020\004\005\005\016\006\010\007\004" +
    "\010\021\012\u0117\056\024\001\002\000\020\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\012\uff92\056\uff92\001\002" +
    "\000\100\002\uff95\004\uff95\005\uff95\006\uff95\007\uff95\010" +
    "\uff95\011\uff95\012\uff95\013\uff95\021\uff95\023\uff95\024\uff95" +
    "\025\uff95\026\uff95\027\uff95\035\uff95\052\uff95\053\uff95\055" +
    "\uff95\056\uff95\057\uff95\060\uff95\062\uff95\063\uff95\065\uff95" +
    "\066\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95\001" +
    "\002\000\004\013\041\001\002\000\004\013\041\001\002" +
    "\000\004\011\054\001\002\000\026\002\uff8f\004\uff8f\005" +
    "\uff8f\006\uff8f\007\uff8f\010\uff8f\056\uff8f\063\uff8f\065\uff8f" +
    "\066\uff8f\001\002\000\004\011\054\001\002\000\026\002" +
    "\uff91\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\056\uff91" +
    "\063\uff91\065\uff91\066\uff91\001\002\000\004\056\u0120\001" +
    "\002\000\100\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\021\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\035\ufff2\052\ufff2\053\ufff2" +
    "\055\ufff2\056\ufff2\057\ufff2\060\ufff2\062\ufff2\063\ufff2\065" +
    "\ufff2\066\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2" +
    "\001\002\000\010\020\uffec\030\uffec\054\u0121\001\002\000" +
    "\026\011\063\013\134\035\105\052\124\053\117\055\135" +
    "\056\141\057\122\060\104\074\074\001\002\000\006\020" +
    "\uffed\030\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\026\003\022\004\014\006\012\007\013\010" +
    "\024\011\021\012\016\013\005\015\006\044\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\u010f\007\013\010\024\011\021\012\016\013\005\015\006" +
    "\044\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\034\017" +
    "\041\047\037\001\001\000\004\017\214\001\001\000\020" +
    "\022\u0109\023\135\024\114\025\150\051\136\060\076\062" +
    "\151\001\001\000\020\022\u0108\023\135\024\114\025\150" +
    "\051\136\060\076\062\151\001\001\000\004\026\052\001" +
    "\001\000\010\012\043\046\045\064\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\043\064\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\012\112\013\115\014\113\015\006" +
    "\023\122\024\114\025\070\027\064\030\065\031\102\035" +
    "\061\036\074\037\130\040\117\041\100\042\131\043\060" +
    "\044\067\051\126\052\125\053\120\054\105\055\110\056" +
    "\056\057\132\060\076\062\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\373\021\374" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\012" +
    "\112\013\115\014\113\015\006\023\122\024\114\025\070" +
    "\027\372\031\102\035\061\036\074\037\130\040\117\041" +
    "\100\042\131\043\060\044\067\051\126\052\125\053\120" +
    "\054\105\055\110\056\056\057\132\060\076\062\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\141\017\041\050\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\320\033\316\034\317\001\001" +
    "\000\002\001\001\000\014\023\135\024\114\051\136\060" +
    "\076\062\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\023\135" +
    "\024\114\051\136\060\076\062\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\022\222" +
    "\023\135\024\114\025\150\051\136\060\076\062\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\135\024\114\051\136\060\076\062\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\141\017\041\050\143\001" +
    "\001\000\004\017\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\020\147\022\152\023" +
    "\135\024\114\025\150\051\136\060\076\062\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\023\135\024\114" +
    "\051\136\060\076\062\210\001\001\000\014\023\135\024" +
    "\114\051\136\060\076\062\207\001\001\000\014\023\135" +
    "\024\114\051\136\060\076\062\206\001\001\000\014\023" +
    "\135\024\114\051\136\060\076\062\205\001\001\000\014" +
    "\023\135\024\114\051\136\060\076\062\204\001\001\000" +
    "\014\023\135\024\114\051\136\060\076\062\203\001\001" +
    "\000\014\023\135\024\114\051\136\060\076\062\202\001" +
    "\001\000\014\023\135\024\114\051\136\060\076\062\201" +
    "\001\001\000\014\023\135\024\114\051\136\060\076\062" +
    "\200\001\001\000\014\023\135\024\114\051\136\060\076" +
    "\062\177\001\001\000\014\023\135\024\114\051\136\060" +
    "\076\062\176\001\001\000\014\023\135\024\114\051\136" +
    "\060\076\062\173\001\001\000\014\023\135\024\114\051" +
    "\136\060\076\062\172\001\001\000\014\023\135\024\114" +
    "\051\136\060\076\062\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\023\135\024\114" +
    "\051\136\060\076\062\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\022\213\023\135\024\114\025" +
    "\150\051\136\060\076\062\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\220\001\001\000\006\016\141\017\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\022\226\023\135" +
    "\024\114\025\150\051\136\060\076\062\151\001\001\000" +
    "\002\001\001\000\020\022\230\023\135\024\114\025\150" +
    "\051\136\060\076\062\151\001\001\000\002\001\001\000" +
    "\020\022\232\023\135\024\114\025\150\051\136\060\076" +
    "\062\151\001\001\000\002\001\001\000\020\022\234\023" +
    "\135\024\114\025\150\051\136\060\076\062\151\001\001" +
    "\000\002\001\001\000\020\022\236\023\135\024\114\025" +
    "\150\051\136\060\076\062\151\001\001\000\002\001\001" +
    "\000\020\022\240\023\135\024\114\025\150\051\136\060" +
    "\076\062\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\022\244\023\135\024\114\025" +
    "\150\051\136\060\076\062\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\034\017\041\001\001\000" +
    "\020\022\250\023\135\024\114\025\150\051\136\060\076" +
    "\062\151\001\001\000\002\001\001\000\020\022\252\023" +
    "\135\024\114\025\150\051\136\060\076\062\151\001\001" +
    "\000\002\001\001\000\020\022\254\023\135\024\114\025" +
    "\150\051\136\060\076\062\151\001\001\000\002\001\001" +
    "\000\020\022\256\023\135\024\114\025\150\051\136\060" +
    "\076\062\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\112\013\263\014\265\015" +
    "\006\023\262\024\114\063\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\022\273\023\135\024\114\025" +
    "\150\051\136\060\076\062\151\001\001\000\004\065\271" +
    "\001\001\000\006\016\141\017\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\275\023\262\024\114\001" +
    "\001\000\002\001\001\000\006\016\141\017\041\001\001" +
    "\000\004\026\300\001\001\000\002\001\001\000\020\022" +
    "\302\023\135\024\114\025\150\051\136\060\076\062\151" +
    "\001\001\000\002\001\001\000\020\022\304\023\135\024" +
    "\114\025\150\051\136\060\076\062\151\001\001\000\002" +
    "\001\001\000\020\022\306\023\135\024\114\025\150\051" +
    "\136\060\076\062\151\001\001\000\002\001\001\000\020" +
    "\022\310\023\135\024\114\025\150\051\136\060\076\062" +
    "\151\001\001\000\002\001\001\000\020\022\312\023\135" +
    "\024\114\025\150\051\136\060\076\062\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\324\001\001\000\002\001\001\000\006\032\322\033" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\022" +
    "\326\023\135\024\114\025\150\051\136\060\076\062\151" +
    "\001\001\000\002\001\001\000\004\026\330\001\001\000" +
    "\002\001\001\000\020\022\332\023\135\024\114\025\150" +
    "\051\136\060\076\062\151\001\001\000\002\001\001\000" +
    "\020\022\334\023\135\024\114\025\150\051\136\060\076" +
    "\062\151\001\001\000\002\001\001\000\020\022\336\023" +
    "\135\024\114\025\150\051\136\060\076\062\151\001\001" +
    "\000\002\001\001\000\020\022\340\023\135\024\114\025" +
    "\150\051\136\060\076\062\151\001\001\000\002\001\001" +
    "\000\020\022\342\023\135\024\114\025\150\051\136\060" +
    "\076\062\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\022\345\023\135\024\114\025\150\051\136\060" +
    "\076\062\151\001\001\000\002\001\001\000\004\026\347" +
    "\001\001\000\002\001\001\000\020\022\351\023\135\024" +
    "\114\025\150\051\136\060\076\062\151\001\001\000\002" +
    "\001\001\000\004\026\353\001\001\000\002\001\001\000" +
    "\020\022\355\023\135\024\114\025\150\051\136\060\076" +
    "\062\151\001\001\000\002\001\001\000\020\022\357\023" +
    "\135\024\114\025\150\051\136\060\076\062\151\001\001" +
    "\000\002\001\001\000\020\022\361\023\135\024\114\025" +
    "\150\051\136\060\076\062\151\001\001\000\002\001\001" +
    "\000\020\022\363\023\135\024\114\025\150\051\136\060" +
    "\076\062\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\020\376\022\152\023" +
    "\135\024\114\025\150\051\136\060\076\062\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u0102\001\001\000\002\001\001\000\020\022\u0104" +
    "\023\135\024\114\025\150\051\136\060\076\062\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\022\u010d\023\135\024\114\025\150" +
    "\051\136\060\076\062\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\112\013\u0112\015\006\045\u0114\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\112" +
    "\013\u0115\015\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u011b\001\001\000\004\047\u0119\001\001" +
    "\000\004\026\u011a\001\001\000\002\001\001\000\004\026" +
    "\u011c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\022\u0121\023\135\024" +
    "\114\025\150\051\136\060\076\062\151\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDMM$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDMM$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDMM$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	public static Archivo elementosArchivo;

	

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserDMM$actions {


//Operaciones_Listas operaciones = new Operaciones_Listas();



  private final ParserDMM parser;

  /** Constructor */
  CUP$ParserDMM$actions(ParserDMM parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserDMM$do_action(
    int                        CUP$ParserDMM$act_num,
    java_cup.runtime.lr_parser CUP$ParserDMM$parser,
    java.util.Stack            CUP$ParserDMM$stack,
    int                        CUP$ParserDMM$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDMM$result;

      /* select the action based on the action number */
      switch (CUP$ParserDMM$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LINEA ::= linea abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new Linea(a,b,c,d,e,f);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(45/*LINEA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-13)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // P_CADENA ::= t_cadena abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new P_Cadena(a,b,c,d);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(44/*P_CADENA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OVALO ::= ovalo abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new Ovalo(a,b,c,d,e);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(43/*OVALO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-11)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CUADRADO ::= cuadrado abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new Cuadrado(a,b,c,d,e);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(42/*CUADRADO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-11)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PUNTO ::= puntoD abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		RESULT= new Punto(a,b,c,d);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(41/*PUNTO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-10)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FUN_NATIVA ::= LINEA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FUN_NATIVA ::= P_CADENA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FUN_NATIVA ::= OVALO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FUN_NATIVA ::= CUADRADO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FUN_NATIVA ::= PUNTO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLA_PARAMETROS ::= abrePar LISTA_DECLA_PARAMETROS cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(37/*DECLA_PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLA_PARAMETROS ::= abrePar cierraPar 
            {
              Object RESULT = null;
		RESULT = new ArrayList<Declaracion>();
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(37/*DECLA_PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LISTA_DECLA_PARAMETROS ::= LISTA_DECLA_PARAMETROS coma DECLA_PARAMETRO 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<Declaracion> lista =( ArrayList<Declaracion>)b;
			lista.add((Declaracion)a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(36/*LISTA_DECLA_PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LISTA_DECLA_PARAMETROS ::= DECLA_PARAMETRO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<Declaracion> lista = new ArrayList<Declaracion>();
			lista.add((Declaracion)a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(36/*LISTA_DECLA_PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLA_PARAMETRO ::= TIPO_DATO identificador 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			Declaracion decla = new Declaracion(t);
			decla.insertarVar(a);
			RESULT= decla;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(50/*DECLA_PARAMETRO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PRINCIPAL ::= vacio principal DECLA_PARAMETROS CUERPO_FUNCION 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			RESULT = new Funcion("Principal","Vacio", true, c,d);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(5/*PRINCIPAL*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUNCION ::= TIPO_DATO identificador DECLA_PARAMETROS CUERPO_FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			RESULT = new Funcion(b,a, false, c,d);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(6/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNCION ::= vacio identificador DECLA_PARAMETROS CUERPO_FUNCION 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			RESULT = new Funcion(b,"Vacio", false, c,d);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(6/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LISTA_DECLARACIONES ::= LISTA_DECLARACIONES DECLARACION 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		List<objetoBase> lista = (ArrayList<objetoBase>)l;
		lista.add((objetoBase)a);
		RESULT= lista;
	
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(35/*LISTA_DECLARACIONES*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LISTA_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		List<objetoBase> lista = new ArrayList<>();
		lista.add((objetoBase)a);
		RESULT= lista;
	
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(35/*LISTA_DECLARACIONES*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ESTRUCTURA ::= estructura identificador abreLlave cierraLlave 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		
			RESULT= new Estructura(a, new ArrayList<objetoBase>());
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(34/*ESTRUCTURA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ESTRUCTURA ::= estructura identificador abreLlave LISTA_DECLARACIONES cierraLlave 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		
			RESULT= new Estructura(a, b);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(34/*ESTRUCTURA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // IMPORTAR ::= importar abrePar cadena cierraPar puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		RESULT= new Importar(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(7/*IMPORTAR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IMPRIMIR ::= imprimir abrePar EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		RESULT= new Imprimir(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(33/*IMPRIMIR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RETORNAR ::= retornar EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new Retornar(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(32/*RETORNAR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RETORNAR ::= retornar puntoComa 
            {
              Object RESULT = null;
		RESULT= new Retornar();
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(32/*RETORNAR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONTINUAR ::= continuar puntoComa 
            {
              Object RESULT = null;
		RESULT= new Continuar();
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(31/*CONTINUAR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DETENER ::= detener puntoComa 
            {
              Object RESULT = null;
		RESULT= new Detener();
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(30/*DETENER*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARA ::= para abrePar DECLA_PARA EXPRESION puntoComa ASIGNACION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		RESULT = new Para(a,b,c,d);
	
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(29/*PARA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLA_PARA ::= ASIGNACION NT$0 puntoComa 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(49/*DECLA_PARA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$0 ::= 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(51/*NT$0*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLA_PARA ::= DECLARACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(49/*DECLA_PARA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MIENTRAS ::= mientras abrePar EXPRESION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			RESULT= new Mientras(a,b);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(28/*MIENTRAS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SI ::= IF L_SINO_SI SINO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Si(4,a,b, c);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(27/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SI ::= IF L_SINO_SI 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Si(3,a,new CuerpoFuncion(), b);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(27/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SI ::= IF SINO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Si(2,a,b, new ArrayList<IF>());
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(27/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SI ::= IF 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Si(1,a,new CuerpoFuncion(), new ArrayList<IF>());
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(27/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // L_SINO_SI ::= L_SINO_SI SINO_SI 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<IF> lista= (ArrayList<IF>)l;
			lista.add((IF)a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(26/*L_SINO_SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // L_SINO_SI ::= SINO_SI 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<IF> lista= new ArrayList<IF>();
			lista.add((IF)a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(26/*L_SINO_SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SINO_SI ::= sino si abrePar EXPRESION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT = new IF(a,b);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(25/*SINO_SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SINO ::= sino CUERPO_FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(24/*SINO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IF ::= si abrePar EXPRESION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT = new IF(a,b);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(23/*IF*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
					List<objetoBase> lista = (List<objetoBase>)l;
					lista.add((objetoBase)a);
				    RESULT= lista;
				
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(22/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
					List<objetoBase> lista = new ArrayList<objetoBase>();
					lista.add((objetoBase)a);
					RESULT= lista;
				
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(22/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA ::= LLAMADA puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA ::= FUN_NATIVA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA ::= ESTRUCTURA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA ::= RETORNAR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA ::= CONTINUAR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA ::= DETENER 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= PARA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= SI 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= TERNARIO puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= ASIGNACION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CUERPO_FUNCION ::= abreLlave SENTENCIAS cierraLlave 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT = new CuerpoFuncion(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(20/*CUERPO_FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CUERPO_FUNCION ::= abreLlave cierraLlave 
            {
              Object RESULT = null;
		RESULT = new CuerpoFuncion();
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(20/*CUERPO_FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TERNARIO ::= VAL_EXPRESION interrogacion VAL_EXPRESION dosPuntos VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Ternario(a,b,c);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(19/*TERNARIO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LLAMADA ::= identificador PARAMETROS_LLAMADA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT = new Llamada(a,b);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(39/*LLAMADA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETROS_LLAMADA ::= abrePar cierraPar 
            {
              Object RESULT = null;
		RESULT= new ArrayList<objetoBase>(); 
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(38/*PARAMETROS_LLAMADA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMETROS_LLAMADA ::= abrePar LISTA_EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a; 
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(38/*PARAMETROS_LLAMADA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAL_EXPRESION ::= LLAMADA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT = a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAL_EXPRESION ::= abrePar VAL_EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT = a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VAL_EXPRESION ::= not VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new NOT(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VAL_EXPRESION ::= VAL_EXPRESION or VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Logica(a,b,"||");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VAL_EXPRESION ::= VAL_EXPRESION and VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Logica(a,b,"&&");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VAL_EXPRESION ::= VAL_EXPRESION distintoA VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Relacional(a,b,"!=");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VAL_EXPRESION ::= VAL_EXPRESION igualIgual VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Relacional(a,b,"==");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VAL_EXPRESION ::= VAL_EXPRESION mayorIgual VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Relacional(a,b,">=");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VAL_EXPRESION ::= VAL_EXPRESION menorIgual VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Relacional(a,b,"<=");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VAL_EXPRESION ::= VAL_EXPRESION mayor VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Relacional(a,b,">");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VAL_EXPRESION ::= VAL_EXPRESION menor VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Relacional(a,b,"<");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VAL_EXPRESION ::= menos VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Negativo(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VAL_EXPRESION ::= identificador menosMenos 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new Unario(a,"--");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VAL_EXPRESION ::= identificador masMas 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new Unario(a,"++");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VAL_EXPRESION ::= VAL_EXPRESION potencia VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Aritmetica(a,b,"^");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VAL_EXPRESION ::= VAL_EXPRESION division VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Aritmetica(a,b,"/");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VAL_EXPRESION ::= VAL_EXPRESION multiplicacion VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Aritmetica(a,b,"*");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VAL_EXPRESION ::= VAL_EXPRESION menos VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Aritmetica(a,b,"-");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VAL_EXPRESION ::= VAL_EXPRESION mas VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Aritmetica(a,b,"+");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VAL_EXPRESION ::= valBool 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Booleano(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VAL_EXPRESION ::= caracter 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Caracter(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VAL_EXPRESION ::= numero_entero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Entero(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VAL_EXPRESION ::= numero_decimal 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Decimal(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VAL_EXPRESION ::= cadena 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Cadena(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VAL_EXPRESION ::= ACCESO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VAL_EXPRESION ::= DIMENSIONES_EXPRESION_ARREGLO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(16/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= TERNARIO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT = a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(16/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DIMENSIONES_EXPRESION_ARREGLO ::= abreLlave LISTA_DIMESNIONES_EXP_ARREGLO cierraLlave 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT = a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(46/*DIMENSIONES_EXPRESION_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA_DIMESNIONES_EXP_ARREGLO ::= LISTA_DIMESNIONES_EXP_ARREGLO coma DIM_EXPRESIONES 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			Lista_Dimensiones_Exp_Arreglo lista = (Lista_Dimensiones_Exp_Arreglo)l;
			lista.insertar(a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(15/*LISTA_DIMESNIONES_EXP_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_DIMESNIONES_EXP_ARREGLO ::= DIM_EXPRESIONES 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			Lista_Dimensiones_Exp_Arreglo lista = new Lista_Dimensiones_Exp_Arreglo();
			lista.insertar(a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(15/*LISTA_DIMESNIONES_EXP_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DIM_EXPRESIONES ::= abreLlave LISTA_EXPRESION cierraLlave 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT = new Lista_Expresiones(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(3/*DIM_EXPRESIONES*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_EXPRESION ::= LISTA_EXPRESION coma EXPRESION 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = (ArrayList<objetoBase>)l;
			lista.add((objetoBase)e);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(14/*LISTA_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_EXPRESION ::= EXPRESION 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = new ArrayList<objetoBase>();
			lista.add((objetoBase)e);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(14/*LISTA_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VAL_ARREGLO ::= abreCor EXPRESION cierraCor 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(13/*VAL_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TAMANIO_ARREGLO ::= TAMANIO_ARREGLO VAL_ARREGLO 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = (ArrayList<objetoBase>)l;
			lista.add((objetoBase)e);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(12/*TAMANIO_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TAMANIO_ARREGLO ::= VAL_ARREGLO 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = new ArrayList<objetoBase>();
			lista.add((objetoBase)e);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(12/*TAMANIO_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // POS_ARREGLO ::= identificador TAMANIO_ARREGLO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new posArreglo(a,b);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(18/*POS_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ACCESO ::= ACCESO punto POS_ARREGLO 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		    Acceso acc = (Acceso)l;
			acc.elementos.add((objetoBase)a);
			RESULT=acc;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(17/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ACCESO ::= ACCESO punto identificador 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		    Acceso acc = (Acceso)l;
			Identificador b = new Identificador(a);
			acc.elementos.add((objetoBase)b);
			RESULT=acc;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(17/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ACCESO ::= POS_ARREGLO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = new ArrayList<objetoBase>();
			lista.add((objetoBase)a);
			RESULT= new Acceso(lista);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(17/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ACCESO ::= identificador 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = new ArrayList<objetoBase>();
			Identificador b = new Identificador(a);
			lista.add((objetoBase)b);
			RESULT= new Acceso(lista);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(17/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION ::= identificador menosMenos 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new AsignaUnario(a,"--");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(10/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION ::= identificador masMas 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new AsignaUnario(a,"++");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(10/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= ACCESO igual EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT = new AsignaAcceso(a,b);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(10/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_ID_ASIGNA ::= LISTA_ID_ASIGNA coma identificador 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		    Declaracion decla = (Declaracion)d;
			decla.insertarVar(a);
			RESULT= decla;
			
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(11/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_ID_ASIGNA ::= LISTA_ID_ASIGNA coma identificador igual EXPRESION 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		    Declaracion decla = (Declaracion)d;
			decla.insertarVar(a);
			List<objetoBase> lista = new ArrayList<objetoBase>();
			Identificador id = new Identificador(a);
			lista.add((objetoBase)id);
			Acceso acc =  new Acceso(lista);
			AsignaAcceso asig = new AsignaAcceso(acc, b);
			decla.insertarAsigna(asig);
			RESULT= decla;
			
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(11/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_ID_ASIGNA ::= TIPO_DATO identificador 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			Declaracion decla = new Declaracion(t);
			decla.insertarVar(a);
			RESULT= decla;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(11/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_ID_ASIGNA ::= TIPO_DATO identificador igual EXPRESION 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			Declaracion decla = new Declaracion(t);
			decla.insertarVar(a);
			
			List<objetoBase> lista = new ArrayList<objetoBase>();
			Identificador id = new Identificador(a);
			lista.add((objetoBase)id);
			Acceso acc =  new Acceso(lista);
			
			AsignaAcceso asig = new AsignaAcceso(acc, b);
			decla.insertarAsigna(asig);
			RESULT= decla;
		
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(11/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= TIPO_DATO identificador TAMANIO_ARREGLO igual EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		
			DeclaArreglo decla = new DeclaArreglo(a,b,c);
			List<objetoBase> lista = new ArrayList<objetoBase>();
			posArreglo n = new posArreglo(b,c);
			lista.add((objetoBase)n);
			Acceso acc =  new Acceso(lista);
			AsignaAcceso asig = new AsignaAcceso(acc, d);
			decla.agregarAsigna(asig);
			RESULT= decla;
		
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(9/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= TIPO_DATO identificador TAMANIO_ARREGLO puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		
		   RESULT= new DeclaArreglo(a, b, c);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(9/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= LISTA_ID_ASIGNA puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(9/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_DATO ::= identificador 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_DATO ::= t_booleano 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO_DATO ::= t_caracter 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO_DATO ::= t_cadena 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO_DATO ::= t_decimal 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO_DATO ::= t_entero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ELEMENTO_ARCHIVO ::= ESTRUCTURA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(4/*ELEMENTO_ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ELEMENTO_ARCHIVO ::= DECLARACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(4/*ELEMENTO_ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ELEMENTO_ARCHIVO ::= IMPORTAR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(4/*ELEMENTO_ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ELEMENTO_ARCHIVO ::= FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(4/*ELEMENTO_ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ELEMENTO_ARCHIVO ::= PRINCIPAL 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(4/*ELEMENTO_ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ARCHIVO ::= ARCHIVO ELEMENTO_ARCHIVO 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = (ArrayList<objetoBase>)l;
			lista.add((objetoBase)a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(2/*ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ARCHIVO ::= ELEMENTO_ARCHIVO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = new ArrayList<>();
			lista.add((objetoBase)a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(2/*ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ARCHIVO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		parser.elementosArchivo= new Archivo(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT = start_val;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ParserDMM$parser.done_parsing();
          return CUP$ParserDMM$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

