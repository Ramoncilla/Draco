
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Oct 17 23:53:16 CST 2018
//----------------------------------------------------

package D_Mas_Mas.Analizador;

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Wed Oct 17 23:53:16 CST 2018
  */
public class ParserDMM extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserDMM() {super();}

  /** Constructor which sets the default scanner. */
  public ParserDMM(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\005\000\002\013\006\000\002\013" +
    "\010\000\002\061\005\000\002\061\003\000\002\015\003" +
    "\000\002\015\005\000\002\014\005\000\002\014\004\000" +
    "\002\014\004\000\002\016\003\000\002\016\004\000\002" +
    "\017\005\000\002\020\003\000\002\020\005\000\002\005" +
    "\005\000\002\021\003\000\002\021\005\000\002\060\005" +
    "\000\002\022\003\000\002\022\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\024\004\000\002\025\007" +
    "\000\002\026\004\000\002\026\005\000\002\027\003\000" +
    "\002\027\004\000\002\027\004\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\004\000\002\030\003\000" +
    "\002\030\004\000\002\031\007\000\002\032\004\000\002" +
    "\033\010\000\002\034\003\000\002\034\004\000\002\035" +
    "\003\000\002\035\004\000\002\035\004\000\002\035\005" +
    "\000\002\036\007\000\002\063\003\000\002\063\004\000" +
    "\002\037\012\000\002\040\004\000\002\041\004\000\002" +
    "\042\004\000\002\042\005\000\002\043\007\000\002\011" +
    "\007\000\002\044\007\000\002\045\004\000\002\045\005" +
    "\000\002\010\006\000\002\010\006\000\002\007\006\000" +
    "\002\064\004\000\002\046\003\000\002\046\005\000\002" +
    "\047\004\000\002\047\005\000\002\050\005\000\002\050" +
    "\004\000\002\051\004\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\053\015\000\002\054\016\000\002\055\016\000\002" +
    "\056\014\000\002\057\020" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\022\004\007\005\015\006\020\007\012\010" +
    "\016\056\021\063\014\066\013\001\002\000\024\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\056\ufffb\063" +
    "\ufffb\066\ufffb\001\002\000\024\002\000\004\007\005\015" +
    "\006\020\007\012\010\016\056\021\063\014\066\013\001" +
    "\002\000\024\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\056\uffff\063\uffff\066\uffff\001\002\000\004\056" +
    "\ufffa\001\002\000\004\056\365\001\002\000\004\002\364" +
    "\001\002\000\004\056\ufff7\001\002\000\006\056\027\067" +
    "\030\001\002\000\004\013\023\001\002\000\004\056\ufff9" +
    "\001\002\000\004\056\ufff6\001\002\000\024\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\056\ufffc\063\ufffc" +
    "\066\ufffc\001\002\000\004\056\ufff8\001\002\000\004\056" +
    "\ufff5\001\002\000\024\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\056\ufffd\063\ufffd\066\ufffd\001\002\000" +
    "\004\055\024\001\002\000\004\014\025\001\002\000\004" +
    "\020\026\001\002\000\024\002\uffb1\004\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\056\uffb1\063\uffb1\066\uffb1\001\002" +
    "\000\004\013\032\001\002\000\004\013\032\001\002\000" +
    "\004\011\044\001\002\000\020\004\007\005\015\006\020" +
    "\007\012\010\016\014\035\056\021\001\002\000\006\014" +
    "\uffa9\030\uffa9\001\002\000\004\056\042\001\002\000\004" +
    "\011\uffa7\001\002\000\006\014\040\030\037\001\002\000" +
    "\016\004\007\005\015\006\020\007\012\010\016\056\021" +
    "\001\002\000\004\011\uffa6\001\002\000\006\014\uffa8\030" +
    "\uffa8\001\002\000\006\014\uffaa\030\uffaa\001\002\000\024" +
    "\002\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\056" +
    "\uffab\063\uffab\066\uffab\001\002\000\060\004\007\005\015" +
    "\006\063\007\012\010\016\011\052\012\046\021\064\023" +
    "\100\024\067\025\057\026\050\027\115\055\121\056\062" +
    "\057\110\060\074\062\045\065\073\070\101\071\076\072" +
    "\071\073\112\001\002\000\004\020\361\001\002\000\070" +
    "\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\062" +
    "\uffd4\063\uffd4\065\uffd4\066\uffd4\070\uffd4\071\uffd4\072\uffd4" +
    "\073\uffd4\001\002\000\060\004\uff9f\005\uff9f\006\uff9f\007" +
    "\uff9f\010\uff9f\011\uff9f\012\uff9f\021\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\055\uff9f\056\uff9f\057\uff9f\060" +
    "\uff9f\062\uff9f\065\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f" +
    "\001\002\000\004\013\355\001\002\000\060\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\021\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\062\uffc9\065\uffc9\070\uffc9\071\uffc9" +
    "\072\uffc9\073\uffc9\001\002\000\004\011\347\001\002\000" +
    "\060\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\062\uffcf\065\uffcf" +
    "\070\uffcf\071\uffcf\072\uffcf\073\uffcf\001\002\000\004\061" +
    "\137\001\002\000\060\004\007\005\015\006\063\007\012" +
    "\010\016\011\052\012\343\021\064\023\100\024\067\025" +
    "\057\026\050\027\115\055\121\056\062\057\110\060\074" +
    "\062\045\065\073\070\101\071\076\072\071\073\112\001" +
    "\002\000\060\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\062\uffc5" +
    "\065\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\001\002\000" +
    "\004\020\342\001\002\000\060\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\012\uffc8\021\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\062\uffc8\065\uffc8\070\uffc8\071\uffc8\072\uffc8\073" +
    "\uffc8\001\002\000\004\020\341\001\002\000\022\013\332" +
    "\015\131\031\uffda\032\226\033\225\054\uffda\056\ufff5\061" +
    "\uffda\001\002\000\006\013\320\056\ufff8\001\002\000\004" +
    "\013\314\001\002\000\060\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\010\uffce\011\uffce\012\uffce\021\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\062\uffce\065\uffce\070\uffce\071\uffce\072\uffce\073\uffce" +
    "\001\002\000\020\012\uffdf\014\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\030\uffdf\061\uffdf\001\002\000\004\013\310\001\002" +
    "\000\060\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\062\uffcb\065" +
    "\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\001\002\000\004" +
    "\013\275\001\002\000\062\004\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\021\uffbe\022\261\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\062\uffbe\065\uffbe\070\uffbe\071\uffbe\072\uffbe" +
    "\073\uffbe\001\002\000\004\056\251\001\002\000\020\012" +
    "\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\030\uffdc\061\uffdc" +
    "\001\002\000\060\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\021\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\062" +
    "\uffa1\065\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\001\002" +
    "\000\004\013\236\001\002\000\060\004\uffa0\005\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\021\uffa0\023\uffa0" +
    "\024\uffa0\025\uffa0\026\uffa0\027\uffa0\055\uffa0\056\uffa0\057" +
    "\uffa0\060\uffa0\062\uffa0\065\uffa0\070\uffa0\071\uffa0\072\uffa0" +
    "\073\uffa0\001\002\000\004\013\217\001\002\000\004\013" +
    "\205\001\002\000\004\056\170\001\002\000\004\020\166" +
    "\001\002\000\024\012\uffd9\014\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\030\uffd9\031\uffd9\054\uffd9\061\uffd9\001\002\000\060" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\062\uffd2\065\uffd2\070" +
    "\uffd2\071\uffd2\072\uffd2\073\uffd2\001\002\000\060\004\uffcc" +
    "\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\021" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\060\uffcc\062\uffcc\065\uffcc\070\uffcc\071" +
    "\uffcc\072\uffcc\073\uffcc\001\002\000\060\004\uffa2\005\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\021\uffa2\023" +
    "\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\055\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\062\uffa2\065\uffa2\070\uffa2\071\uffa2\072" +
    "\uffa2\073\uffa2\001\002\000\020\012\uffdb\014\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\030\uffdb\061\uffdb\001\002\000\010\031" +
    "\143\054\164\061\uffde\001\002\000\004\013\147\001\002" +
    "\000\060\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\021\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\062\uffc7\065" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\001\002\000\004" +
    "\020\146\001\002\000\016\011\052\020\123\055\121\056" +
    "\127\057\110\060\074\001\002\000\060\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\021\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\062\uffcd\065\uffcd\070\uffcd\071\uffcd\072" +
    "\uffcd\073\uffcd\001\002\000\060\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\012\uffca\021\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\055\uffca\056\uffca\057\uffca" +
    "\060\uffca\062\uffca\065\uffca\070\uffca\071\uffca\072\uffca\073" +
    "\uffca\001\002\000\060\004\uff9e\005\uff9e\006\uff9e\007\uff9e" +
    "\010\uff9e\011\uff9e\012\uff9e\021\uff9e\023\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e" +
    "\062\uff9e\065\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\001" +
    "\002\000\020\012\uffdd\014\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\030\uffdd\061\uffdd\001\002\000\022\012\uffde\014\uffde\016" +
    "\uffde\017\uffde\020\uffde\030\uffde\031\143\061\uffde\001\002" +
    "\000\060\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\012\uffb4\021\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\062\uffb4\065" +
    "\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\001\002\000\014" +
    "\012\uffe1\014\uffe1\016\uffe1\020\uffe1\030\uffe1\001\002\000" +
    "\016\012\uffe0\014\uffe0\016\uffe0\020\uffe0\030\uffe0\061\137" +
    "\001\002\000\004\020\136\001\002\000\024\012\uffda\014" +
    "\uffda\015\131\016\uffda\017\uffda\020\uffda\030\uffda\031\uffda" +
    "\061\uffda\001\002\000\026\012\uffd6\014\uffd6\015\131\016" +
    "\uffd6\017\uffd6\020\uffd6\030\uffd6\031\uffd6\054\uffd6\061\uffd6" +
    "\001\002\000\014\011\052\055\121\056\127\057\110\060" +
    "\074\001\002\000\026\012\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\030\uffea\031\uffea\054\uffea\061\uffea\001" +
    "\002\000\004\016\134\001\002\000\026\012\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\030\uffe8\031\uffe8\054" +
    "\uffe8\061\uffe8\001\002\000\026\012\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\030\uffe9\031\uffe9\054\uffe9\061" +
    "\uffe9\001\002\000\060\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\021\uffb3\023\uffb3\024\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3" +
    "\062\uffb3\065\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\001" +
    "\002\000\014\011\052\055\121\056\127\057\110\060\074" +
    "\001\002\000\004\017\141\001\002\000\014\011\052\055" +
    "\121\056\127\057\110\060\074\001\002\000\014\012\uffd5" +
    "\014\uffd5\016\uffd5\020\uffd5\030\uffd5\001\002\000\004\056" +
    "\144\001\002\000\026\012\uffd8\014\uffd8\015\131\016\uffd8" +
    "\017\uffd8\020\uffd8\030\uffd8\031\uffd8\054\uffd8\061\uffd8\001" +
    "\002\000\024\012\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\030\uffd7\031\uffd7\054\uffd7\061\uffd7\001\002\000\060\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\021\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\055" +
    "\uffc6\056\uffc6\057\uffc6\060\uffc6\062\uffc6\065\uffc6\070\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\001\002\000\014\011\052\055" +
    "\121\056\127\057\110\060\074\001\002\000\004\030\151" +
    "\001\002\000\014\011\052\055\121\056\127\057\110\060" +
    "\074\001\002\000\004\030\153\001\002\000\014\011\052" +
    "\055\121\056\127\057\110\060\074\001\002\000\004\030" +
    "\155\001\002\000\014\011\052\055\121\056\127\057\110" +
    "\060\074\001\002\000\004\030\157\001\002\000\014\011" +
    "\052\055\121\056\127\057\110\060\074\001\002\000\004" +
    "\030\161\001\002\000\014\011\052\055\121\056\127\057" +
    "\110\060\074\001\002\000\004\014\163\001\002\000\060" +
    "\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\021\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\062\uff99\065\uff99\070" +
    "\uff99\071\uff99\072\uff99\073\uff99\001\002\000\014\011\052" +
    "\055\121\056\127\057\110\060\074\001\002\000\006\014" +
    "\uffed\020\uffed\001\002\000\060\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\021\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\062\uffd1\065\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\001\002\000\006\020\uffef\030\uffef\001\002\000\012" +
    "\015\131\020\ufff0\030\ufff0\054\176\001\002\000\006\020" +
    "\173\030\172\001\002\000\004\056\175\001\002\000\062" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\020\ufff4\021\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\062\ufff4\065" +
    "\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\001\002\000\006" +
    "\020\uffee\030\uffee\001\002\000\010\020\ufff0\030\ufff0\054" +
    "\176\001\002\000\014\011\052\055\121\056\127\057\110" +
    "\060\074\001\002\000\006\020\ufff1\030\ufff1\001\002\000" +
    "\010\015\131\020\202\054\201\001\002\000\014\011\052" +
    "\055\121\056\127\057\110\060\074\001\002\000\062\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\020\ufff3\021\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\062\ufff3\065\ufff3" +
    "\070\ufff3\071\ufff3\072\ufff3\073\ufff3\001\002\000\004\020" +
    "\204\001\002\000\062\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\020\ufff2\021\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\055\ufff2\056\ufff2\057\ufff2" +
    "\060\ufff2\062\ufff2\065\ufff2\070\ufff2\071\ufff2\072\ufff2\073" +
    "\ufff2\001\002\000\014\011\052\055\121\056\127\057\110" +
    "\060\074\001\002\000\004\030\207\001\002\000\014\011" +
    "\052\055\121\056\127\057\110\060\074\001\002\000\004" +
    "\030\211\001\002\000\014\011\052\055\121\056\127\057" +
    "\110\060\074\001\002\000\004\030\213\001\002\000\014" +
    "\011\052\055\121\056\127\057\110\060\074\001\002\000" +
    "\004\014\215\001\002\000\004\020\216\001\002\000\060" +
    "\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012" +
    "\uff9d\021\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\055\uff9d\056\uff9d\057\uff9d\060\uff9d\062\uff9d\065\uff9d\070" +
    "\uff9d\071\uff9d\072\uff9d\073\uff9d\001\002\000\016\004\007" +
    "\005\015\006\020\007\012\010\016\056\224\001\002\000" +
    "\006\031\143\054\164\001\002\000\014\011\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\001\002\000\014\011\052\055" +
    "\121\056\127\057\110\060\074\001\002\000\004\020\227" +
    "\001\002\000\016\015\131\031\uffda\032\226\033\225\054" +
    "\uffda\056\ufff5\001\002\000\006\014\uffeb\020\uffeb\001\002" +
    "\000\006\014\uffec\020\uffec\001\002\000\014\011\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\001\002\000\004\020\231" +
    "\001\002\000\004\056\233\001\002\000\004\014\234\001" +
    "\002\000\014\015\131\031\uffda\032\226\033\225\054\uffda" +
    "\001\002\000\004\011\044\001\002\000\060\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\021\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\060\uffb7\062\uffb7\065\uffb7\070\uffb7\071\uffb7" +
    "\072\uffb7\073\uffb7\001\002\000\014\011\052\055\121\056" +
    "\127\057\110\060\074\001\002\000\004\030\240\001\002" +
    "\000\014\011\052\055\121\056\127\057\110\060\074\001" +
    "\002\000\004\030\242\001\002\000\014\011\052\055\121" +
    "\056\127\057\110\060\074\001\002\000\004\030\244\001" +
    "\002\000\014\011\052\055\121\056\127\057\110\060\074" +
    "\001\002\000\004\030\246\001\002\000\014\011\052\055" +
    "\121\056\127\057\110\060\074\001\002\000\004\014\250" +
    "\001\002\000\060\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010" +
    "\uff9c\011\uff9c\012\uff9c\021\uff9c\023\uff9c\024\uff9c\025\uff9c" +
    "\026\uff9c\027\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\062" +
    "\uff9c\065\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\001\002" +
    "\000\004\011\252\001\002\000\016\004\007\005\015\006" +
    "\020\007\012\010\016\056\021\001\002\000\004\020\260" +
    "\001\002\000\020\004\007\005\015\006\020\007\012\010" +
    "\016\012\256\056\021\001\002\000\004\020\257\001\002" +
    "\000\060\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\021\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\062\uffb0\065" +
    "\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\001\002\000\020" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\012\uffae\056" +
    "\uffae\001\002\000\020\004\uffaf\005\uffaf\006\uffaf\007\uffaf" +
    "\010\uffaf\012\uffaf\056\uffaf\001\002\000\006\011\044\021" +
    "\267\001\002\000\062\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\021\uffbc\022\261\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\062\uffbc\065\uffbc\070\uffbc\071\uffbc\072\uffbc\073" +
    "\uffbc\001\002\000\062\004\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\062\uffc0\065\uffc0\070\uffc0\071\uffc0\072\uffc0\073" +
    "\uffc0\001\002\000\060\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\021\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\062\uffbd\065\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\001" +
    "\002\000\062\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\062\uffbf\065\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\001" +
    "\002\000\060\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\021\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\062\uffbb" +
    "\065\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\001\002\000" +
    "\004\013\271\001\002\000\060\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\021\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\062\uffc2\065\uffc2\070\uffc2\071\uffc2\072\uffc2\073" +
    "\uffc2\001\002\000\014\011\052\055\121\056\127\057\110" +
    "\060\074\001\002\000\004\014\273\001\002\000\004\011" +
    "\044\001\002\000\062\004\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\062\uffc1\065\uffc1\070\uffc1\071\uffc1\072\uffc1\073" +
    "\uffc1\001\002\000\014\011\052\055\121\056\127\057\110" +
    "\060\074\001\002\000\004\030\277\001\002\000\014\011" +
    "\052\055\121\056\127\057\110\060\074\001\002\000\004" +
    "\030\301\001\002\000\014\011\052\055\121\056\127\057" +
    "\110\060\074\001\002\000\004\030\303\001\002\000\014" +
    "\011\052\055\121\056\127\057\110\060\074\001\002\000" +
    "\004\030\305\001\002\000\014\011\052\055\121\056\127" +
    "\057\110\060\074\001\002\000\004\014\307\001\002\000" +
    "\060\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b" +
    "\012\uff9b\021\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\062\uff9b\065\uff9b" +
    "\070\uff9b\071\uff9b\072\uff9b\073\uff9b\001\002\000\014\011" +
    "\052\055\121\056\127\057\110\060\074\001\002\000\004" +
    "\014\312\001\002\000\004\011\044\001\002\000\060\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba" +
    "\021\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\uffba\062\uffba\065\uffba\070\uffba" +
    "\071\uffba\072\uffba\073\uffba\001\002\000\014\011\052\055" +
    "\121\056\127\057\110\060\074\001\002\000\004\014\316" +
    "\001\002\000\004\011\044\001\002\000\062\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\062\uffc3\065\uffc3\070\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\001\002\000\014\011\052\055" +
    "\121\056\127\057\110\060\074\001\002\000\004\030\322" +
    "\001\002\000\014\011\052\055\121\056\127\057\110\060" +
    "\074\001\002\000\004\030\324\001\002\000\014\011\052" +
    "\055\121\056\127\057\110\060\074\001\002\000\004\030" +
    "\326\001\002\000\014\011\052\055\121\056\127\057\110" +
    "\060\074\001\002\000\004\014\330\001\002\000\060\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a" +
    "\021\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\055" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\062\uff9a\065\uff9a\070\uff9a" +
    "\071\uff9a\072\uff9a\073\uff9a\001\002\000\004\020\uffa3\001" +
    "\002\000\016\011\052\014\333\055\121\056\127\057\110" +
    "\060\074\001\002\000\004\020\uffa4\001\002\000\006\014" +
    "\337\030\336\001\002\000\010\012\uffe7\014\uffe7\030\uffe7" +
    "\001\002\000\014\011\052\055\121\056\127\057\110\060" +
    "\074\001\002\000\004\020\uffa5\001\002\000\010\012\uffe6" +
    "\014\uffe6\030\uffe6\001\002\000\060\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\021\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\055\uffd0\056\uffd0\057" +
    "\uffd0\060\uffd0\062\uffd0\065\uffd0\070\uffd0\071\uffd0\072\uffd0" +
    "\073\uffd0\001\002\000\060\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\010\uffb6\011\uffb6\012\uffb6\021\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\062\uffb6\065\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\001\002\000\070\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\062\uffd3\063\uffd3\065\uffd3\066\uffd3\070\uffd3" +
    "\071\uffd3\072\uffd3\073\uffd3\001\002\000\060\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\021\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\062\uffc4\065\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\073\uffc4\001\002\000\006\012\uffe4\030\uffe4\001" +
    "\002\000\006\012\352\030\353\001\002\000\014\011\052" +
    "\055\121\056\127\057\110\060\074\001\002\000\006\012" +
    "\351\030\336\001\002\000\006\012\uffe5\030\uffe5\001\002" +
    "\000\020\012\uffe2\014\uffe2\016\uffe2\017\uffe2\020\uffe2\030" +
    "\uffe2\061\uffe2\001\002\000\004\011\347\001\002\000\006" +
    "\012\uffe3\030\uffe3\001\002\000\014\011\052\055\121\056" +
    "\127\057\110\060\074\001\002\000\004\014\357\001\002" +
    "\000\004\020\360\001\002\000\060\004\uffb2\005\uffb2\006" +
    "\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\021\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\060\uffb2\062\uffb2\065\uffb2\070\uffb2\071\uffb2\072\uffb2" +
    "\073\uffb2\001\002\000\060\004\uffb5\005\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\021\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\062\uffb5\065\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5" +
    "\001\002\000\004\011\044\001\002\000\024\002\uffad\004" +
    "\uffad\005\uffad\006\uffad\007\uffad\010\uffad\056\uffad\063\uffad" +
    "\066\uffad\001\002\000\004\002\001\001\002\000\004\013" +
    "\032\001\002\000\004\011\044\001\002\000\024\002\uffac" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\056\uffac\063" +
    "\uffac\066\uffac\001\002\000\024\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\056\ufffe\063\ufffe\066\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\020\003\010\004\004\006\005\007\021\010" +
    "\016\011\003\012\007\001\001\000\002\001\001\000\014" +
    "\006\367\007\021\010\016\011\003\012\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\361\001\001\000\004\047\030\001" +
    "\001\000\004\026\042\001\001\000\010\012\033\046\035" +
    "\064\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\033\064\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\012\101\013\104\014\102" +
    "\023\110\024\103\025\060\027\055\030\054\031\071\035" +
    "\052\036\064\037\115\040\105\041\067\042\116\043\050" +
    "\044\057\051\113\052\112\053\106\054\074\055\076\056" +
    "\046\057\117\060\065\062\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\344\021\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\012\101\013\104\014" +
    "\102\023\110\024\103\025\060\027\343\031\071\035\052" +
    "\036\064\037\115\040\105\041\067\042\116\043\050\044" +
    "\057\051\113\052\112\053\106\054\074\055\076\056\046" +
    "\057\117\060\065\062\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\127\017\131\050\330\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\032" +
    "\263\033\262\034\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\170" +
    "\061\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\022\125\023\121\024\103" +
    "\025\123\060\065\062\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\127\017\131\001\001" +
    "\000\004\017\134\001\001\000\016\022\132\023\121\024" +
    "\103\025\123\060\065\062\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\121\024\103\060\065\062\137" +
    "\001\001\000\002\001\001\000\012\023\121\024\103\060" +
    "\065\062\141\001\001\000\002\001\001\000\004\024\144" +
    "\001\001\000\006\016\127\017\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\022\147\023\121\024\103" +
    "\025\123\060\065\062\124\001\001\000\002\001\001\000" +
    "\016\022\151\023\121\024\103\025\123\060\065\062\124" +
    "\001\001\000\002\001\001\000\016\022\153\023\121\024" +
    "\103\025\123\060\065\062\124\001\001\000\002\001\001" +
    "\000\016\022\155\023\121\024\103\025\123\060\065\062" +
    "\124\001\001\000\002\001\001\000\016\022\157\023\121" +
    "\024\103\025\123\060\065\062\124\001\001\000\002\001" +
    "\001\000\016\022\161\023\121\024\103\025\123\060\065" +
    "\062\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\022\164\023\121\024\103\025\123\060\065\062\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\177\017\131\001\001\000\002\001\001" +
    "\000\004\061\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\022\176\023\121\024\103" +
    "\025\123\060\065\062\124\001\001\000\002\001\001\000" +
    "\004\017\134\001\001\000\016\022\202\023\121\024\103" +
    "\025\123\060\065\062\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\022\205\023\121" +
    "\024\103\025\123\060\065\062\124\001\001\000\002\001" +
    "\001\000\016\022\207\023\121\024\103\025\123\060\065" +
    "\062\124\001\001\000\002\001\001\000\016\022\211\023" +
    "\121\024\103\025\123\060\065\062\124\001\001\000\002" +
    "\001\001\000\016\022\213\023\121\024\103\025\123\060" +
    "\065\062\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\101\013\220\014\222\023" +
    "\217\024\103\063\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\227\023\121\024\103\025\123\060" +
    "\065\062\124\001\001\000\002\001\001\000\006\016\127" +
    "\017\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\231\023\217" +
    "\024\103\001\001\000\002\001\001\000\006\016\127\017" +
    "\131\001\001\000\004\026\234\001\001\000\002\001\001" +
    "\000\016\022\236\023\121\024\103\025\123\060\065\062" +
    "\124\001\001\000\002\001\001\000\016\022\240\023\121" +
    "\024\103\025\123\060\065\062\124\001\001\000\002\001" +
    "\001\000\016\022\242\023\121\024\103\025\123\060\065" +
    "\062\124\001\001\000\002\001\001\000\016\022\244\023" +
    "\121\024\103\025\123\060\065\062\124\001\001\000\002" +
    "\001\001\000\016\022\246\023\121\024\103\025\123\060" +
    "\065\062\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\101\013\252\045\253\001" +
    "\001\000\002\001\001\000\006\012\101\013\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\267\001\001\000\006\032\265" +
    "\033\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\271\023\121\024\103\025\123\060" +
    "\065\062\124\001\001\000\002\001\001\000\004\026\273" +
    "\001\001\000\002\001\001\000\016\022\275\023\121\024" +
    "\103\025\123\060\065\062\124\001\001\000\002\001\001" +
    "\000\016\022\277\023\121\024\103\025\123\060\065\062" +
    "\124\001\001\000\002\001\001\000\016\022\301\023\121" +
    "\024\103\025\123\060\065\062\124\001\001\000\002\001" +
    "\001\000\016\022\303\023\121\024\103\025\123\060\065" +
    "\062\124\001\001\000\002\001\001\000\016\022\305\023" +
    "\121\024\103\025\123\060\065\062\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\022\310\023\121\024" +
    "\103\025\123\060\065\062\124\001\001\000\002\001\001" +
    "\000\004\026\312\001\001\000\002\001\001\000\016\022" +
    "\314\023\121\024\103\025\123\060\065\062\124\001\001" +
    "\000\002\001\001\000\004\026\316\001\001\000\002\001" +
    "\001\000\016\022\320\023\121\024\103\025\123\060\065" +
    "\062\124\001\001\000\002\001\001\000\016\022\322\023" +
    "\121\024\103\025\123\060\065\062\124\001\001\000\002" +
    "\001\001\000\016\022\324\023\121\024\103\025\123\060" +
    "\065\062\124\001\001\000\002\001\001\000\016\022\326" +
    "\023\121\024\103\025\123\060\065\062\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\020\333\022\334\023\121\024\103\025\123\060\065\062" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\337\023\121\024\103\025\123\060" +
    "\065\062\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\020\347\022\334\023\121\024\103\025\123\060\065\062" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\353\001\001\000\002\001\001\000" +
    "\016\022\355\023\121\024\103\025\123\060\065\062\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\362\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\365\001\001\000" +
    "\004\026\366\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDMM$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDMM$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDMM$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserDMM$actions {


//Operaciones_Listas operaciones = new Operaciones_Listas();


  private final ParserDMM parser;

  /** Constructor */
  CUP$ParserDMM$actions(ParserDMM parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserDMM$do_action(
    int                        CUP$ParserDMM$act_num,
    java_cup.runtime.lr_parser CUP$ParserDMM$parser,
    java.util.Stack            CUP$ParserDMM$stack,
    int                        CUP$ParserDMM$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDMM$result;

      /* select the action based on the action number */
      switch (CUP$ParserDMM$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LINEA ::= linea abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(45/*LINEA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-13)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // P_CADENA ::= t_cadena abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(44/*P_CADENA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OVALO ::= ovalo abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(43/*OVALO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-11)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CUADRADO ::= cuadrado abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(42/*CUADRADO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-11)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PUNTO ::= puntoD abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(41/*PUNTO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-10)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUN_NATIVA ::= LINEA 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUN_NATIVA ::= P_CADENA 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUN_NATIVA ::= OVALO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUN_NATIVA ::= CUADRADO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUN_NATIVA ::= PUNTO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LLAMADA ::= identificador PARAMETROS_LLAMADA 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(39/*LLAMADA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMETROS_LLAMADA ::= abrePar cierraPar 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(38/*PARAMETROS_LLAMADA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMETROS_LLAMADA ::= abrePar LISTA_EXPRESION cierraPar 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(38/*PARAMETROS_LLAMADA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLA_PARAMETROS ::= abrePar LISTA_DECLA_PARAMETROS cierraPar 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(37/*DECLA_PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLA_PARAMETROS ::= abrePar cierraPar 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(37/*DECLA_PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTA_DECLA_PARAMETROS ::= LISTA_DECLA_PARAMETROS coma DECLA_PARAMETRO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(36/*LISTA_DECLA_PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTA_DECLA_PARAMETROS ::= DECLA_PARAMETRO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(36/*LISTA_DECLA_PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLA_PARAMETRO ::= TIPO_DATO identificador 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(50/*DECLA_PARAMETRO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PRINCIPAL ::= vacio principal DECLA_PARAMETROS CUERPO_FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(5/*PRINCIPAL*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNCION ::= TIPO_DATO identificador DECLA_PARAMETROS CUERPO_FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(6/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNCION ::= vacio identificador DECLA_PARAMETROS CUERPO_FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(6/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_DECLARACIONES ::= LISTA_DECLARACIONES DECLARACION puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(35/*LISTA_DECLARACIONES*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LISTA_DECLARACIONES ::= DECLARACION puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(35/*LISTA_DECLARACIONES*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ESTRUCTURA ::= estructura identificador abreLlave LISTA_DECLARACIONES cierraLlave 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(34/*ESTRUCTURA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IMPORTAR ::= importar abrePar cadena cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(7/*IMPORTAR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IMPRIMIR ::= imprimir abrePar EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(33/*IMPRIMIR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RETORNAR ::= retornar EXPRESION puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(32/*RETORNAR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RETORNAR ::= retornar puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(32/*RETORNAR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTINUAR ::= continuar puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(31/*CONTINUAR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DETENER ::= detener puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(30/*DETENER*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARA ::= para abrePar DECLA_PARA EXPRESION puntoComa ASIGNACION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(29/*PARA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLA_PARA ::= ASIGNACION puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(49/*DECLA_PARA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLA_PARA ::= DECLARACION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(49/*DECLA_PARA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MIENTRAS ::= mientras abrePar EXPRESION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(28/*MIENTRAS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SI ::= IF L_SINO_SI SINO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(27/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SI ::= IF L_SINO_SI 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(27/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SI ::= IF SINO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(27/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SI ::= IF 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(27/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // L_SINO_SI ::= L_SINO_SI SINO_SI 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(26/*L_SINO_SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // L_SINO_SI ::= SINO_SI 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(26/*L_SINO_SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SINO_SI ::= sino si abrePar EXPRESION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(25/*SINO_SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SINO ::= sino CUERPO_FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(24/*SINO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IF ::= si abrePar EXPRESION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(23/*IF*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(22/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(22/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA ::= LLAMADA puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA ::= FUN_NATIVA 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA ::= ESTRUCTURA 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA ::= RETORNAR 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA ::= CONTINUAR 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA ::= DETENER 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA ::= PARA 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= SI 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= TERNARIO puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= ASIGNACION puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CUERPO_FUNCION ::= abreLlave SENTENCIAS cierraLlave 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(20/*CUERPO_FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CUERPO_FUNCION ::= abreLlave cierraLlave 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(20/*CUERPO_FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TERNARIO ::= VAL_EXPRESION interrogacion VAL_EXPRESION dosPuntos VAL_EXPRESION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(19/*TERNARIO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // POS_ARREGLO ::= identificador TAMANIO_ARREGLO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(18/*POS_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ACCESO ::= ACCESO punto POS_ARREGLO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(17/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ACCESO ::= ACCESO punto identificador 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(17/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ACCESO ::= POS_ARREGLO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(17/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ACCESO ::= identificador 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(17/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VAL_EXPRESION ::= numero_entero 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VAL_EXPRESION ::= numero_decimal 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VAL_EXPRESION ::= cadena 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VAL_EXPRESION ::= ACCESO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VAL_EXPRESION ::= DIMENSIONES_EXPRESION_ARREGLO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= VAL_EXPRESION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(16/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= TERNARIO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(16/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DIMENSIONES_EXPRESION_ARREGLO ::= abreLlave LISTA_DIMESNIONES_EXP_ARREGLO cierraLlave 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(46/*DIMENSIONES_EXPRESION_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_DIMESNIONES_EXP_ARREGLO ::= LISTA_DIMESNIONES_EXP_ARREGLO coma DIM_EXPRESIONES 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(15/*LISTA_DIMESNIONES_EXP_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_DIMESNIONES_EXP_ARREGLO ::= DIM_EXPRESIONES 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(15/*LISTA_DIMESNIONES_EXP_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DIM_EXPRESIONES ::= abreLlave LISTA_EXPRESION cierraLlave 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(3/*DIM_EXPRESIONES*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_EXPRESION ::= LISTA_EXPRESION coma EXPRESION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(14/*LISTA_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_EXPRESION ::= EXPRESION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(14/*LISTA_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VAL_ARREGLO ::= abreCor EXPRESION cierraCor 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(13/*VAL_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TAMANIO_ARREGLO ::= TAMANIO_ARREGLO VAL_ARREGLO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(12/*TAMANIO_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TAMANIO_ARREGLO ::= VAL_ARREGLO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(12/*TAMANIO_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= identificador menosMenos 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(10/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACION ::= identificador masMas 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(10/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACION ::= ACCESO igual EXPRESION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(10/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_ID_ASIGNA ::= LISTA_ID_ASIGNA coma ID_ASIGNA 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(11/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_ID_ASIGNA ::= ID_ASIGNA 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(11/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ID_ASIGNA ::= identificador 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(47/*ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ID_ASIGNA ::= identificador igual EXPRESION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(47/*ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= TIPO_DATO identificador TAMANIO_ARREGLO igual EXPRESION puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(9/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= TIPO_DATO identificador TAMANIO_ARREGLO puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(9/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= TIPO_DATO LISTA_ID_ASIGNA puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(9/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO_DATO ::= identificador 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO_DATO ::= t_booleano 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO_DATO ::= t_caracter 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO_DATO ::= t_cadena 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO_DATO ::= t_decimal 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO_DATO ::= t_entero 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ELEMENTO_ARCHIVO ::= IMPORTAR 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(4/*ELEMENTO_ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ELEMENTO_ARCHIVO ::= FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(4/*ELEMENTO_ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ELEMENTO_ARCHIVO ::= PRINCIPAL 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(4/*ELEMENTO_ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ARCHIVO ::= ARCHIVO ELEMENTO_ARCHIVO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(2/*ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ARCHIVO ::= ELEMENTO_ARCHIVO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(2/*ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ARCHIVO 
            {
              Object RESULT = null;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT = start_val;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ParserDMM$parser.done_parsing();
          return CUP$ParserDMM$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

