
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Oct 21 19:05:12 CST 2018
//----------------------------------------------------

package D_Mas_Mas.Analizador;

import Arbol.Expresion.*;
import Arbol.Importar;
import Arbol.*;
import Arbol.Funciones.*;
import Arbol.Sentencias.*;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Sun Oct 21 19:05:12 CST 2018
  */
public class ParserDMM extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserDMM() {super();}

  /** Constructor which sets the default scanner. */
  public ParserDMM(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\013" +
    "\004\000\002\013\006\000\002\013\010\000\002\015\006" +
    "\000\002\015\004\000\002\015\007\000\002\015\005\000" +
    "\002\014\005\000\002\014\004\000\002\014\004\000\002" +
    "\023\003\000\002\023\003\000\002\023\005\000\002\023" +
    "\005\000\002\024\004\000\002\016\003\000\002\016\004" +
    "\000\002\017\005\000\002\020\003\000\002\020\005\000" +
    "\002\005\005\000\002\021\003\000\002\021\005\000\002" +
    "\060\005\000\002\022\003\000\002\022\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\005\000\002\062\005\000\002\062\005\000\002" +
    "\062\005\000\002\062\005\000\002\062\004\000\002\062" +
    "\004\000\002\062\004\000\002\062\005\000\002\062\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\005\000" +
    "\002\062\005\000\002\062\005\000\002\062\005\000\002" +
    "\062\004\000\002\062\005\000\002\062\003\000\002\050" +
    "\005\000\002\050\004\000\002\051\004\000\002\025\007" +
    "\000\002\026\004\000\002\026\005\000\002\027\003\000" +
    "\002\027\004\000\002\027\004\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\004\000\002\030\003\000" +
    "\002\030\004\000\002\031\007\000\002\032\004\000\002" +
    "\033\010\000\002\034\003\000\002\034\004\000\002\035" +
    "\003\000\002\035\004\000\002\035\004\000\002\035\005" +
    "\000\002\036\007\000\002\063\003\000\002\065\002\000" +
    "\002\063\005\000\002\037\012\000\002\040\004\000\002" +
    "\041\004\000\002\042\004\000\002\042\005\000\002\043" +
    "\007\000\002\011\007\000\002\044\007\000\002\044\006" +
    "\000\002\045\003\000\002\045\004\000\002\010\006\000" +
    "\002\010\006\000\002\007\006\000\002\064\004\000\002" +
    "\046\003\000\002\046\005\000\002\047\004\000\002\047" +
    "\005\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\053\015\000" +
    "\002\054\016\000\002\055\016\000\002\056\014\000\002" +
    "\057\020" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\026\011\010\013\022\035\014\052\007\053" +
    "\005\055\006\056\025\057\017\060\016\074\013\001\002" +
    "\000\052\002\uffbf\012\uffbf\014\uffbf\016\uffbf\017\uffbf\030" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\061\uffbf\001\002\000\052\002\uffd2\012\uffd2\014\uffd2" +
    "\016\uffd2\017\uffd2\030\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\061\uffd2\001\002\000\052\002" +
    "\uffd6\012\uffd6\014\uffd6\016\uffd6\017\uffd6\030\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\061\uffd6" +
    "\001\002\000\026\011\010\013\022\035\014\052\007\053" +
    "\005\055\006\056\025\057\017\060\016\074\013\001\002" +
    "\000\004\011\115\001\002\000\054\002\uffe7\012\uffe7\014" +
    "\uffe7\016\uffe7\017\uffe7\030\uffe7\031\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\042\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\061\uffe7\001\002" +
    "\000\054\002\uffd7\012\uffd7\014\uffd7\016\uffd7\017\uffd7\030" +
    "\uffd7\031\110\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\061\uffd7\001\002\000\052\002\uffd3\012\uffd3" +
    "\014\uffd3\016\uffd3\017\uffd3\030\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\051\uffd3\061\uffd3\001\002\000" +
    "\026\011\010\013\022\035\014\052\007\053\005\055\006" +
    "\056\025\057\017\060\016\074\013\001\002\000\052\002" +
    "\uffd8\012\uffd8\014\uffd8\016\uffd8\017\uffd8\030\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\061\uffd8" +
    "\001\002\000\052\002\uffd5\012\uffd5\014\uffd5\016\uffd5\017" +
    "\uffd5\030\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\061\uffd5\001\002\000\052\002\uffd4\012\uffd4" +
    "\014\uffd4\016\uffd4\017\uffd4\030\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\061\uffd4\001\002\000" +
    "\014\002\uffda\012\uffda\014\uffda\016\uffda\030\uffda\001\002" +
    "\000\050\002\uffd9\012\uffd9\014\uffd9\016\uffd9\030\uffd9\034" +
    "\065\035\057\036\054\037\062\040\050\042\061\043\064" +
    "\044\063\045\051\046\053\047\055\050\060\051\056\061" +
    "\103\001\002\000\026\011\010\013\022\035\014\052\007" +
    "\053\005\055\006\056\025\057\017\060\016\074\013\001" +
    "\002\000\004\002\000\001\002\000\004\002\046\001\002" +
    "\000\064\002\uffe8\012\uffe8\013\034\014\uffe8\015\027\016" +
    "\uffe8\017\uffe8\030\uffe8\031\uffe8\032\033\033\030\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\061\uffe8" +
    "\001\002\000\056\002\uffe4\012\uffe4\014\uffe4\015\027\016" +
    "\uffe4\017\uffe4\030\uffe4\031\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\061\uffe4\001\002\000\026" +
    "\011\010\013\022\035\014\052\007\053\005\055\006\056" +
    "\025\057\017\060\016\074\013\001\002\000\052\002\uffcb" +
    "\012\uffcb\014\uffcb\016\uffcb\017\uffcb\030\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\061\uffcb\001" +
    "\002\000\052\002\uffbc\012\uffbc\014\uffbc\016\uffbc\017\uffbc" +
    "\030\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\061\uffbc\001\002\000\056\002\uffe3\012\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\030\uffe3\031\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\061\uffe3" +
    "\001\002\000\052\002\uffcc\012\uffcc\014\uffcc\016\uffcc\017" +
    "\uffcc\030\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\061\uffcc\001\002\000\030\011\010\013\022" +
    "\014\035\035\014\052\007\053\005\055\006\056\025\057" +
    "\017\060\016\074\013\001\002\000\052\002\uffbd\012\uffbd" +
    "\014\uffbd\016\uffbd\017\uffbd\030\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\051\uffbd\061\uffbd\001\002\000" +
    "\006\014\041\030\040\001\002\000\010\012\uffe0\014\uffe0" +
    "\030\uffe0\001\002\000\026\011\010\013\022\035\014\052" +
    "\007\053\005\055\006\056\025\057\017\060\016\074\013" +
    "\001\002\000\052\002\uffbe\012\uffbe\014\uffbe\016\uffbe\017" +
    "\uffbe\030\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\061\uffbe\001\002\000\010\012\uffdf\014\uffdf" +
    "\030\uffdf\001\002\000\004\016\044\001\002\000\056\002" +
    "\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\030\uffe1" +
    "\031\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\061\uffe1\001\002\000\056\002\uffe2\012\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\030\uffe2\031\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\061\uffe2" +
    "\001\002\000\004\002\001\001\002\000\036\014\052\034" +
    "\065\035\057\036\054\037\062\040\050\042\061\043\064" +
    "\044\063\045\051\046\053\047\055\050\060\051\056\001" +
    "\002\000\026\011\010\013\022\035\014\052\007\053\005" +
    "\055\006\056\025\057\017\060\016\074\013\001\002\000" +
    "\026\011\010\013\022\035\014\052\007\053\005\055\006" +
    "\056\025\057\017\060\016\074\013\001\002\000\052\002" +
    "\uffc0\012\uffc0\014\uffc0\016\uffc0\017\uffc0\030\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\061\uffc0" +
    "\001\002\000\026\011\010\013\022\035\014\052\007\053" +
    "\005\055\006\056\025\057\017\060\016\074\013\001\002" +
    "\000\026\011\010\013\022\035\014\052\007\053\005\055" +
    "\006\056\025\057\017\060\016\074\013\001\002\000\026" +
    "\011\010\013\022\035\014\052\007\053\005\055\006\056" +
    "\025\057\017\060\016\074\013\001\002\000\026\011\010" +
    "\013\022\035\014\052\007\053\005\055\006\056\025\057" +
    "\017\060\016\074\013\001\002\000\026\011\010\013\022" +
    "\035\014\052\007\053\005\055\006\056\025\057\017\060" +
    "\016\074\013\001\002\000\026\011\010\013\022\035\014" +
    "\052\007\053\005\055\006\056\025\057\017\060\016\074" +
    "\013\001\002\000\026\011\010\013\022\035\014\052\007" +
    "\053\005\055\006\056\025\057\017\060\016\074\013\001" +
    "\002\000\026\011\010\013\022\035\014\052\007\053\005" +
    "\055\006\056\025\057\017\060\016\074\013\001\002\000" +
    "\026\011\010\013\022\035\014\052\007\053\005\055\006" +
    "\056\025\057\017\060\016\074\013\001\002\000\026\011" +
    "\010\013\022\035\014\052\007\053\005\055\006\056\025" +
    "\057\017\060\016\074\013\001\002\000\026\011\010\013" +
    "\022\035\014\052\007\053\005\055\006\056\025\057\017" +
    "\060\016\074\013\001\002\000\052\002\uffd1\012\uffd1\014" +
    "\uffd1\016\uffd1\017\uffd1\030\uffd1\034\uffd1\035\uffd1\036\054" +
    "\037\062\040\050\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\061\uffd1\001\002\000\052" +
    "\002\uffc8\012\uffc8\014\uffc8\016\uffc8\017\uffc8\030\uffc8\034" +
    "\065\035\057\036\054\037\062\040\050\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\061" +
    "\uffc8\001\002\000\052\002\uffc7\012\uffc7\014\uffc7\016\uffc7" +
    "\017\uffc7\030\uffc7\034\065\035\057\036\054\037\062\040" +
    "\050\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\061\uffc7\001\002\000\052\002\uffce\012" +
    "\uffce\014\uffce\016\uffce\017\uffce\030\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\050\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\046\uffce\047\uffce\050\uffce\051\uffce\061\uffce\001\002" +
    "\000\052\002\uffc9\012\uffc9\014\uffc9\016\uffc9\017\uffc9\030" +
    "\uffc9\034\065\035\057\036\054\037\062\040\050\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\061\uffc9\001\002\000\052\002\uffc3\012\uffc3\014\uffc3" +
    "\016\uffc3\017\uffc3\030\uffc3\034\065\035\057\036\054\037" +
    "\062\040\050\042\061\043\064\044\063\045\051\046\053" +
    "\047\055\050\uffc3\051\uffc3\061\uffc3\001\002\000\052\002" +
    "\uffd0\012\uffd0\014\uffd0\016\uffd0\017\uffd0\030\uffd0\034\uffd0" +
    "\035\uffd0\036\054\037\062\040\050\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\061\uffd0" +
    "\001\002\000\052\002\uffc2\012\uffc2\014\uffc2\016\uffc2\017" +
    "\uffc2\030\uffc2\034\065\035\057\036\054\037\062\040\050" +
    "\042\061\043\064\044\063\045\051\046\053\047\055\050" +
    "\060\051\uffc2\061\uffc2\001\002\000\052\002\uffc4\012\uffc4" +
    "\014\uffc4\016\uffc4\017\uffc4\030\uffc4\034\065\035\057\036" +
    "\054\037\062\040\050\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\051\uffc4\061\uffc4\001\002\000" +
    "\052\002\uffcf\012\uffcf\014\uffcf\016\uffcf\017\uffcf\030\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\050\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\061\uffcf\001\002\000\052\002\uffc5\012\uffc5\014\uffc5\016" +
    "\uffc5\017\uffc5\030\uffc5\034\065\035\057\036\054\037\062" +
    "\040\050\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\061\uffc5\001\002\000\052\002\uffc6" +
    "\012\uffc6\014\uffc6\016\uffc6\017\uffc6\030\uffc6\034\065\035" +
    "\057\036\054\037\062\040\050\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\061\uffc6\001" +
    "\002\000\052\002\uffcd\012\uffcd\014\uffcd\016\uffcd\017\uffcd" +
    "\030\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\050\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\061\uffcd\001\002\000\026\011\010\013\022\035" +
    "\014\052\007\053\005\055\006\056\025\057\017\060\016" +
    "\074\013\001\002\000\036\017\105\034\065\035\057\036" +
    "\054\037\062\040\050\042\061\043\064\044\063\045\051" +
    "\046\053\047\055\050\060\051\056\001\002\000\026\011" +
    "\010\013\022\035\014\052\007\053\005\055\006\056\025" +
    "\057\017\060\016\074\013\001\002\000\046\002\uffbb\012" +
    "\uffbb\014\uffbb\016\uffbb\030\uffbb\034\065\035\057\036\054" +
    "\037\062\040\050\042\061\043\064\044\063\045\051\046" +
    "\053\047\055\050\060\051\056\001\002\000\052\002\uffca" +
    "\012\uffca\014\uffca\016\uffca\017\uffca\030\uffca\034\uffca\035" +
    "\uffca\036\054\037\062\040\050\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\061\uffca\001" +
    "\002\000\004\056\111\001\002\000\056\002\uffe6\012\uffe6" +
    "\014\uffe6\015\027\016\uffe6\017\uffe6\030\uffe6\031\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\061" +
    "\uffe6\001\002\000\054\002\uffe5\012\uffe5\014\uffe5\016\uffe5" +
    "\017\uffe5\030\uffe5\031\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\061\uffe5\001\002\000\006\012" +
    "\uffdd\030\uffdd\001\002\000\006\012\120\030\121\001\002" +
    "\000\026\011\010\013\022\035\014\052\007\053\005\055" +
    "\006\056\025\057\017\060\016\074\013\001\002\000\006" +
    "\012\117\030\040\001\002\000\006\012\uffde\030\uffde\001" +
    "\002\000\052\002\uffdb\012\uffdb\014\uffdb\016\uffdb\017\uffdb" +
    "\030\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\061\uffdb\001\002\000\004\011\115\001\002\000" +
    "\006\012\uffdc\030\uffdc\001\002\000\052\002\uffc1\012\uffc1" +
    "\014\uffc1\016\uffc1\017\uffc1\030\uffc1\034\065\035\057\036" +
    "\054\037\062\040\050\042\061\043\064\044\063\045\051" +
    "\046\053\047\055\050\uffc1\051\uffc1\061\uffc1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\022\003\023\022\022\023\011\024\010\025" +
    "\017\051\003\060\014\062\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\023\011\024" +
    "\010\051\003\060\014\062\122\001\001\000\006\005\112" +
    "\021\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\023\011\024\010\051\003\060\014" +
    "\062\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\023\011\024\010\051\003\060\014\062\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\025\017\031" +
    "\050\030\001\001\000\004\017\044\001\001\000\020\022" +
    "\042\023\011\024\010\025\017\051\003\060\014\062\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\020\035\022\036\023\011" +
    "\024\010\025\017\051\003\060\014\062\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\022\041\023\011\024\010\025\017\051\003\060\014\062" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\023\011\024\010\051\003" +
    "\060\014\062\101\001\001\000\014\023\011\024\010\051" +
    "\003\060\014\062\100\001\001\000\002\001\001\000\014" +
    "\023\011\024\010\051\003\060\014\062\077\001\001\000" +
    "\014\023\011\024\010\051\003\060\014\062\076\001\001" +
    "\000\014\023\011\024\010\051\003\060\014\062\075\001" +
    "\001\000\014\023\011\024\010\051\003\060\014\062\074" +
    "\001\001\000\014\023\011\024\010\051\003\060\014\062" +
    "\073\001\001\000\014\023\011\024\010\051\003\060\014" +
    "\062\072\001\001\000\014\023\011\024\010\051\003\060" +
    "\014\062\071\001\001\000\014\023\011\024\010\051\003" +
    "\060\014\062\070\001\001\000\014\023\011\024\010\051" +
    "\003\060\014\062\067\001\001\000\014\023\011\024\010" +
    "\051\003\060\014\062\066\001\001\000\014\023\011\024" +
    "\010\051\003\060\014\062\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\023\011" +
    "\024\010\051\003\060\014\062\103\001\001\000\002\001" +
    "\001\000\014\023\011\024\010\051\003\060\014\062\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\111\001\001\000\006\016\025\017\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\020" +
    "\115\022\036\023\011\024\010\025\017\051\003\060\014" +
    "\062\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\121\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDMM$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDMM$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDMM$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	public static Archivo elementosArchivo;
	public static objetoBase expresion;
	

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserDMM$actions {


//Operaciones_Listas operaciones = new Operaciones_Listas();



  private final ParserDMM parser;

  /** Constructor */
  CUP$ParserDMM$actions(ParserDMM parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserDMM$do_action(
    int                        CUP$ParserDMM$act_num,
    java_cup.runtime.lr_parser CUP$ParserDMM$parser,
    java.util.Stack            CUP$ParserDMM$stack,
    int                        CUP$ParserDMM$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDMM$result;

      /* select the action based on the action number */
      switch (CUP$ParserDMM$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LINEA ::= linea abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new Linea(a,b,c,d,e,f);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(45/*LINEA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-13)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // P_CADENA ::= t_cadena abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new P_Cadena(a,b,c,d);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(44/*P_CADENA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OVALO ::= ovalo abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new Ovalo(a,b,c,d,e);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(43/*OVALO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-11)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CUADRADO ::= cuadrado abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new Cuadrado(a,b,c,d,e);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(42/*CUADRADO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-11)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PUNTO ::= puntoD abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		RESULT= new Punto(a,b,c,d);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(41/*PUNTO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-10)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FUN_NATIVA ::= LINEA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FUN_NATIVA ::= P_CADENA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FUN_NATIVA ::= OVALO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FUN_NATIVA ::= CUADRADO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FUN_NATIVA ::= PUNTO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(40/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLA_PARAMETROS ::= abrePar LISTA_DECLA_PARAMETROS cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(37/*DECLA_PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLA_PARAMETROS ::= abrePar cierraPar 
            {
              Object RESULT = null;
		RESULT = new ArrayList<Declaracion>();
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(37/*DECLA_PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LISTA_DECLA_PARAMETROS ::= LISTA_DECLA_PARAMETROS coma DECLA_PARAMETRO 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<Declaracion> lista =( ArrayList<Declaracion>)b;
			lista.add((Declaracion)a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(36/*LISTA_DECLA_PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LISTA_DECLA_PARAMETROS ::= DECLA_PARAMETRO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<Declaracion> lista = new ArrayList<Declaracion>();
			lista.add((Declaracion)a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(36/*LISTA_DECLA_PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLA_PARAMETRO ::= TIPO_DATO identificador 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			Declaracion decla = new Declaracion(t);
			decla.insertarVar(a);
			RESULT= decla;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(50/*DECLA_PARAMETRO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PRINCIPAL ::= vacio principal DECLA_PARAMETROS CUERPO_FUNCION 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			RESULT = new Funcion("Principal","Vacio", true, c,d);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(5/*PRINCIPAL*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUNCION ::= TIPO_DATO identificador DECLA_PARAMETROS CUERPO_FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			RESULT = new Funcion(b,a, false, c,d);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(6/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNCION ::= vacio identificador DECLA_PARAMETROS CUERPO_FUNCION 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			RESULT = new Funcion(b,"Vacio", false, c,d);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(6/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LISTA_DECLARACIONES ::= LISTA_DECLARACIONES DECLARACION 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		List<objetoBase> lista = (ArrayList<objetoBase>)l;
		lista.add((objetoBase)a);
		RESULT= lista;
	
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(35/*LISTA_DECLARACIONES*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LISTA_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		List<objetoBase> lista = new ArrayList<>();
		lista.add((objetoBase)a);
		RESULT= lista;
	
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(35/*LISTA_DECLARACIONES*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ESTRUCTURA ::= estructura identificador abreLlave cierraLlave 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		
			RESULT= new Estructura(a, new ArrayList<objetoBase>());
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(34/*ESTRUCTURA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ESTRUCTURA ::= estructura identificador abreLlave LISTA_DECLARACIONES cierraLlave 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		
			RESULT= new Estructura(a, b);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(34/*ESTRUCTURA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // IMPORTAR ::= importar abrePar cadena cierraPar puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		RESULT= new Importar(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(7/*IMPORTAR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IMPRIMIR ::= imprimir abrePar EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		RESULT= new Imprimir(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(33/*IMPRIMIR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RETORNAR ::= retornar EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new Retornar(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(32/*RETORNAR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RETORNAR ::= retornar puntoComa 
            {
              Object RESULT = null;
		RESULT= new Retornar();
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(32/*RETORNAR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONTINUAR ::= continuar puntoComa 
            {
              Object RESULT = null;
		RESULT= new Continuar();
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(31/*CONTINUAR*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DETENER ::= detener puntoComa 
            {
              Object RESULT = null;
		RESULT= new Detener();
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(30/*DETENER*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARA ::= para abrePar DECLA_PARA EXPRESION puntoComa ASIGNACION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		RESULT = new Para(a,b,c,d);
	
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(29/*PARA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLA_PARA ::= ASIGNACION NT$0 puntoComa 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;

              CUP$ParserDMM$result = new java_cup.runtime.Symbol(49/*DECLA_PARA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$0 ::= 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(51/*NT$0*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLA_PARA ::= DECLARACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(49/*DECLA_PARA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MIENTRAS ::= mientras abrePar EXPRESION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			RESULT= new Mientras(a,b);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(28/*MIENTRAS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SI ::= IF L_SINO_SI SINO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Si(4,a,b, c);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(27/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SI ::= IF L_SINO_SI 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Si(3,a,new CuerpoFuncion(), b);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(27/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SI ::= IF SINO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Si(2,a,b, new ArrayList<IF>());
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(27/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SI ::= IF 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Si(1,a,new CuerpoFuncion(), new ArrayList<IF>());
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(27/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // L_SINO_SI ::= L_SINO_SI SINO_SI 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<IF> lista= (ArrayList<IF>)l;
			lista.add((IF)a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(26/*L_SINO_SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // L_SINO_SI ::= SINO_SI 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<IF> lista= new ArrayList<IF>();
			lista.add((IF)a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(26/*L_SINO_SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SINO_SI ::= sino si abrePar EXPRESION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT = new IF(a,b);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(25/*SINO_SI*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SINO ::= sino CUERPO_FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(24/*SINO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IF ::= si abrePar EXPRESION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT = new IF(a,b);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(23/*IF*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
					List<objetoBase> lista = (List<objetoBase>)l;
					lista.add((objetoBase)a);
				    RESULT= lista;
				
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(22/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
					List<objetoBase> lista = new ArrayList<objetoBase>();
					lista.add((objetoBase)a);
					RESULT= lista;
				
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(22/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA ::= LLAMADA puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA ::= FUN_NATIVA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA ::= ESTRUCTURA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA ::= RETORNAR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA ::= CONTINUAR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA ::= DETENER 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= PARA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= SI 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= TERNARIO puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= ASIGNACION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(21/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CUERPO_FUNCION ::= abreLlave SENTENCIAS cierraLlave 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT = new CuerpoFuncion(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(20/*CUERPO_FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CUERPO_FUNCION ::= abreLlave cierraLlave 
            {
              Object RESULT = null;
		RESULT = new CuerpoFuncion();
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(20/*CUERPO_FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TERNARIO ::= VAL_EXPRESION interrogacion VAL_EXPRESION dosPuntos VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Ternario(a,b,c);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(19/*TERNARIO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LLAMADA ::= identificador PARAMETROS_LLAMADA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT = new Llamada(a,b);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(39/*LLAMADA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETROS_LLAMADA ::= abrePar cierraPar 
            {
              Object RESULT = null;
		RESULT= new ArrayList<objetoBase>(); 
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(38/*PARAMETROS_LLAMADA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMETROS_LLAMADA ::= abrePar LISTA_EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a; 
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(38/*PARAMETROS_LLAMADA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAL_EXPRESION ::= LLAMADA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT = a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAL_EXPRESION ::= abrePar VAL_EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT = a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VAL_EXPRESION ::= not VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new NOT(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VAL_EXPRESION ::= VAL_EXPRESION or VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Logica(a,b,"||");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VAL_EXPRESION ::= VAL_EXPRESION and VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Logica(a,b,"&&");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VAL_EXPRESION ::= VAL_EXPRESION distintoA VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Relacional(a,b,"!=");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VAL_EXPRESION ::= VAL_EXPRESION igualIgual VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Relacional(a,b,"==");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VAL_EXPRESION ::= VAL_EXPRESION mayorIgual VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Relacional(a,b,">=");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VAL_EXPRESION ::= VAL_EXPRESION menorIgual VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Relacional(a,b,"<=");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VAL_EXPRESION ::= VAL_EXPRESION mayor VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Relacional(a,b,">");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VAL_EXPRESION ::= VAL_EXPRESION menor VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Relacional(a,b,"<");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VAL_EXPRESION ::= menos VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Negativo(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VAL_EXPRESION ::= identificador menosMenos 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new Unario(a,"--");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VAL_EXPRESION ::= identificador masMas 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new Unario(a,"++");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VAL_EXPRESION ::= VAL_EXPRESION potencia VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Aritmetica(a,b,"^");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VAL_EXPRESION ::= VAL_EXPRESION division VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Aritmetica(a,b,"/");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VAL_EXPRESION ::= VAL_EXPRESION multiplicacion VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Aritmetica(a,b,"*");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VAL_EXPRESION ::= VAL_EXPRESION menos VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Aritmetica(a,b,"-");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VAL_EXPRESION ::= VAL_EXPRESION mas VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Aritmetica(a,b,"+");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VAL_EXPRESION ::= valBool 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Booleano(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VAL_EXPRESION ::= caracter 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Caracter(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VAL_EXPRESION ::= numero_entero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Entero(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VAL_EXPRESION ::= numero_decimal 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Decimal(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VAL_EXPRESION ::= cadena 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new Cadena(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VAL_EXPRESION ::= ACCESO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VAL_EXPRESION ::= DIMENSIONES_EXPRESION_ARREGLO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(48/*VAL_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= VAL_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(16/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= TERNARIO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT = a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(16/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DIMENSIONES_EXPRESION_ARREGLO ::= abreLlave LISTA_DIMESNIONES_EXP_ARREGLO cierraLlave 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT = a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(46/*DIMENSIONES_EXPRESION_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA_DIMESNIONES_EXP_ARREGLO ::= LISTA_DIMESNIONES_EXP_ARREGLO coma DIM_EXPRESIONES 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			Lista_Dimensiones_Exp_Arreglo lista = (Lista_Dimensiones_Exp_Arreglo)l;
			lista.insertar(a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(15/*LISTA_DIMESNIONES_EXP_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_DIMESNIONES_EXP_ARREGLO ::= DIM_EXPRESIONES 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			Lista_Dimensiones_Exp_Arreglo lista = new Lista_Dimensiones_Exp_Arreglo();
			lista.insertar(a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(15/*LISTA_DIMESNIONES_EXP_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DIM_EXPRESIONES ::= abreLlave LISTA_EXPRESION cierraLlave 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT = new Lista_Expresiones(a);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(3/*DIM_EXPRESIONES*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_EXPRESION ::= LISTA_EXPRESION coma EXPRESION 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = (ArrayList<objetoBase>)l;
			lista.add((objetoBase)e);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(14/*LISTA_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_EXPRESION ::= EXPRESION 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = new ArrayList<objetoBase>();
			lista.add((objetoBase)e);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(14/*LISTA_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VAL_ARREGLO ::= abreCor EXPRESION cierraCor 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(13/*VAL_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TAMANIO_ARREGLO ::= TAMANIO_ARREGLO VAL_ARREGLO 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = (ArrayList<objetoBase>)l;
			lista.add((objetoBase)e);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(12/*TAMANIO_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TAMANIO_ARREGLO ::= VAL_ARREGLO 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = new ArrayList<objetoBase>();
			lista.add((objetoBase)e);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(12/*TAMANIO_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // POS_ARREGLO ::= identificador TAMANIO_ARREGLO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= new posArreglo(a,b);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(18/*POS_ARREGLO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ACCESO ::= ACCESO punto POS_ARREGLO 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		    Acceso acc = (Acceso)l;
			acc.elementos.add((objetoBase)a);
			RESULT=acc;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(17/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ACCESO ::= ACCESO punto identificador 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		    Acceso acc = (Acceso)l;
			Identificador b = new Identificador(a);
			acc.elementos.add((objetoBase)b);
			RESULT=acc;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(17/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ACCESO ::= POS_ARREGLO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = new ArrayList<objetoBase>();
			lista.add((objetoBase)a);
			RESULT= new Acceso(lista);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(17/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ACCESO ::= identificador 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = new ArrayList<objetoBase>();
			Identificador b = new Identificador(a);
			lista.add((objetoBase)b);
			RESULT= new Acceso(lista);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(17/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION ::= identificador menosMenos 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new AsignaUnario(a,"--");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(10/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION ::= identificador masMas 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= new AsignaUnario(a,"++");
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(10/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= ACCESO igual EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT = new AsignaAcceso(a,b);
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(10/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_ID_ASIGNA ::= LISTA_ID_ASIGNA coma identificador 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		    Declaracion decla = (Declaracion)d;
			decla.insertarVar(a);
			RESULT= decla;
			
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(11/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_ID_ASIGNA ::= LISTA_ID_ASIGNA coma identificador igual EXPRESION 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
		    Declaracion decla = (Declaracion)d;
			decla.insertarVar(a);
			List<objetoBase> lista = new ArrayList<objetoBase>();
			Identificador id = new Identificador(a);
			lista.add((objetoBase)id);
			Acceso acc =  new Acceso(lista);
			AsignaAcceso asig = new AsignaAcceso(acc, b);
			decla.insertarAsigna(asig);
			RESULT= decla;
			
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(11/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_ID_ASIGNA ::= TIPO_DATO identificador 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			Declaracion decla = new Declaracion(t);
			decla.insertarVar(a);
			RESULT= decla;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(11/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_ID_ASIGNA ::= TIPO_DATO identificador igual EXPRESION 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			Declaracion decla = new Declaracion(t);
			decla.insertarVar(a);
			
			List<objetoBase> lista = new ArrayList<objetoBase>();
			Identificador id = new Identificador(a);
			lista.add((objetoBase)id);
			Acceso acc =  new Acceso(lista);
			
			AsignaAcceso asig = new AsignaAcceso(acc, b);
			decla.insertarAsigna(asig);
			RESULT= decla;
		
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(11/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= TIPO_DATO identificador TAMANIO_ARREGLO igual EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		
			DeclaArreglo decla = new DeclaArreglo(a,b,c);
			List<objetoBase> lista = new ArrayList<objetoBase>();
			posArreglo n = new posArreglo(b,c);
			lista.add((objetoBase)n);
			Acceso acc =  new Acceso(lista);
			AsignaAcceso asig = new AsignaAcceso(acc, d);
			decla.agregarAsigna(asig);
			RESULT= decla;
		
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(9/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= TIPO_DATO identificador TAMANIO_ARREGLO puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		
		   RESULT= new DeclaArreglo(a, b, c);
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(9/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= LISTA_ID_ASIGNA puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(9/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_DATO ::= identificador 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_DATO ::= t_booleano 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO_DATO ::= t_caracter 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO_DATO ::= t_cadena 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO_DATO ::= t_decimal 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO_DATO ::= t_entero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(8/*TIPO_DATO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ELEMENTO_ARCHIVO ::= ESTRUCTURA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(4/*ELEMENTO_ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ELEMENTO_ARCHIVO ::= DECLARACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(4/*ELEMENTO_ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ELEMENTO_ARCHIVO ::= IMPORTAR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(4/*ELEMENTO_ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ELEMENTO_ARCHIVO ::= FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(4/*ELEMENTO_ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ELEMENTO_ARCHIVO ::= PRINCIPAL 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		RESULT= a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(4/*ELEMENTO_ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ARCHIVO ::= ARCHIVO ELEMENTO_ARCHIVO 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = (ArrayList<objetoBase>)l;
			lista.add((objetoBase)a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(2/*ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ARCHIVO ::= ELEMENTO_ARCHIVO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		
			List<objetoBase> lista = new ArrayList<>();
			lista.add((objetoBase)a);
			RESULT= lista;
		
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(2/*ARCHIVO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).value;
		parser.expresion = (objetoBase) a;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          return CUP$ParserDMM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).value;
		RESULT = start_val;
              CUP$ParserDMM$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDMM$stack.elementAt(CUP$ParserDMM$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ParserDMM$parser.done_parsing();
          return CUP$ParserDMM$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

