package D_Mas_Mas.Analizador;

import Arbol.Expresion.*;
import Arbol.Importar;
import Arbol.*;
import Arbol.Funciones.*;
import Arbol.Sentencias.*;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;


parser code
{:
 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}

:}


action code
{:
//Operaciones_Listas operaciones = new Operaciones_Listas();

:}


/*-------- Terminales ---------------*/


terminal String t_entero,
	t_decimal,
	t_cadena,
	t_caracter,
	t_booleano,
	abreLlave, 
	cierraLlave,
	abrePar,
	cierraPar,
	abreCor,
	cierraCor,
	dosPuntos,
	puntoComa,
	si,
	sino,
	para,
	mientras,
	detener, 
	imprimir, retornar, coma, punto, masMas, menosMenos, mas, menos, multiplicacion, division, potencia, residuo, menor, mayor, menorIgual, mayorIgual, igualIgual, distintoA,  and, or, not, valBool, igual, cadena, identificador, numero_entero, numero_decimal, interrogacion, continuar, importar, nulo, estructura, vacio, principal,
	puntoD, cuadrado, ovalo, linea, caracter;

	non terminal INICIO;
	
	non terminal  ARCHIVO,DIM_EXPRESIONES, ELEMENTO_ARCHIVO,PRINCIPAL, FUNCION, IMPORTAR,TIPO_DATO,DECLARACION,ASIGNACION,
  LISTA_ID_ASIGNA,TAMANIO_ARREGLO, VAL_ARREGLO, LISTA_EXPRESION, LISTA_DIMESNIONES_EXP_ARREGLO,
  EXPRESION, ACCESO, POS_ARREGLO, TERNARIO, CUERPO_FUNCION, SENTENCIA,SENTENCIAS, IF, SINO, SINO_SI, L_SINO_SI, SI, MIENTRAS, PARA, DETENER, CONTINUAR, RETORNAR, IMPRIMIR, ESTRUCTURA, LISTA_DECLARACIONES, LISTA_DECLA_PARAMETROS, DECLA_PARAMETROS,PARAMETROS_LLAMADA,LLAMADA, FUN_NATIVA, PUNTO, CUADRADO, OVALO, P_CADENA, LINEA, DIMENSIONES_EXPRESION_ARREGLO, ID_ASIGNA, VAL_EXPRESION, DECLA_PARA, DECLA_PARAMETRO;
	
	
     	precedence left or;
		precedence left and;
		precedence left not;
		precedence left igualIgual, distintoA, menorIgual, mayorIgual,mayor, menor;
		precedence left mas, menos;
        precedence left multiplicacion, division,residuo;
        precedence right potencia;
		precedence left masMas, menosMenos;
		precedence left abrePar;
        
	
	start with INICIO;		
	
	
  INICIO::= ARCHIVO;
  
 
  
ARCHIVO::= ELEMENTO_ARCHIVO
	|ARCHIVO ELEMENTO_ARCHIVO;

ELEMENTO_ARCHIVO::= PRINCIPAL
	|FUNCION
	|IMPORTAR:a{:RESULT= a;:};
  
TIPO_DATO::= t_entero:a{:RESULT= a;:}
	|t_decimal:a{:RESULT= a;:}
	|t_cadena:a{:RESULT= a;:}
	|t_caracter:a{:RESULT= a;:}
	|t_booleano:a{:RESULT= a;:}
	|identificador:a{:RESULT= a;:};

DECLARACION::=  LISTA_ID_ASIGNA:a puntoComa{:RESULT= a;:}
	|TIPO_DATO:a identificador:b TAMANIO_ARREGLO:c puntoComa
		{:
		   RESULT= new DeclaArreglo(a, b, c);
		:}
	|TIPO_DATO:a identificador:b TAMANIO_ARREGLO:c igual EXPRESION:d puntoComa
	{:
			DeclaArreglo decla = new DeclaArreglo(a,b,c);
			List<objetoBase> lista = new ArrayList<objetoBase>();
			posArreglo n = new posArreglo(b,c);
			lista.add((objetoBase)n);
			Acceso acc =  new Acceso(lista);
			AsignaAcceso asig = new AsignaAcceso(acc, d);
			decla.agregarAsigna(asig);
			RESULT= decla;
		
		:};

	
LISTA_ID_ASIGNA::= TIPO_DATO:t identificador:a igual EXPRESION:b
		{:
			Declaracion decla = new Declaracion(t);
			decla.insertarVar(a);
			
			List<objetoBase> lista = new ArrayList<objetoBase>();
			Identificador id = new Identificador(a);
			lista.add((objetoBase)id);
			Acceso acc =  new Acceso(lista);
			
			AsignaAcceso asig = new AsignaAcceso(acc, b);
			decla.insertarAsigna(asig);
			RESULT= decla;
		
		:}
	| TIPO_DATO:t identificador:a
		{:
			Declaracion decla = new Declaracion(t);
			decla.insertarVar(a);
			RESULT= decla;
		:}
	| LISTA_ID_ASIGNA:d coma identificador:a igual EXPRESION:b
		{:
		    Declaracion decla = (Declaracion)d;
			decla.insertarVar(a);
			List<objetoBase> lista = new ArrayList<objetoBase>();
			Identificador id = new Identificador(a);
			lista.add((objetoBase)id);
			Acceso acc =  new Acceso(lista);
			AsignaAcceso asig = new AsignaAcceso(acc, b);
			decla.insertarAsigna(asig);
			RESULT= decla;
			
		:}
	| LISTA_ID_ASIGNA:d coma identificador:a	
		{:
		    Declaracion decla = (Declaracion)d;
			decla.insertarVar(a);
			RESULT= decla;
			
		:};


ASIGNACION::= ACCESO:a igual EXPRESION:b{:RESULT = new AsignaAcceso(a,b);:}
	|identificador:a masMas{:RESULT= new AsignaUnario(a,"++");:}
	|identificador:a menosMenos{:RESULT= new AsignaUnario(a,"--");:};
	
ACCESO::= identificador:a
		{:
			List<objetoBase> lista = new ArrayList<objetoBase>();
			Identificador b = new Identificador(a);
			lista.add((objetoBase)b);
			RESULT= new Acceso(lista);
		:}
	|POS_ARREGLO:a
		{:
			List<objetoBase> lista = new ArrayList<objetoBase>();
			lista.add((objetoBase)a);
			RESULT= new Acceso(lista);
		:}
	|ACCESO:l punto identificador:a
		{:
		    Acceso acc = (Acceso)l;
			//List<objetoBase> lista = (ArrayList<objetoBase>)l;
			Identificador b = new Identificador(a);
			acc.elementos.add((objetoBase)b);
			RESULT=acc;
		:}
	|ACCESO:l punto POS_ARREGLO:a
		{:
		    Acceso acc = (Acceso)l;
			//List<objetoBase> lista = (ArrayList<objetoBase>)l;
			acc.elementos.add((objetoBase)a);
			RESULT=acc;
		:};
	
POS_ARREGLO::= identificador:a TAMANIO_ARREGLO:b{:RESULT= new posArreglo(a,b);:};


TAMANIO_ARREGLO::= VAL_ARREGLO:e
		{:
			List<objetoBase> lista = new ArrayList<objetoBase>();
			lista.add((objetoBase)e);
			RESULT= lista;
		:}
	| TAMANIO_ARREGLO:l VAL_ARREGLO:e
		{:
			List<objetoBase> lista = (ArrayList<objetoBase>)l;
			lista.add((objetoBase)e);
			RESULT= lista;
		:};

VAL_ARREGLO::= abreCor EXPRESION:a cierraCor{:RESULT= a;:};

LISTA_EXPRESION::= EXPRESION:e
		{:
			List<objetoBase> lista = new ArrayList<objetoBase>();
			lista.add((objetoBase)e);
			RESULT= lista;
		:}
	| LISTA_EXPRESION:l coma EXPRESION:e
		{:
			List<objetoBase> lista = (ArrayList<objetoBase>)l;
			lista.add((objetoBase)e);
			RESULT= lista;
		:};
	
	
DIM_EXPRESIONES::= abreLlave LISTA_EXPRESION cierraLlave;

LISTA_DIMESNIONES_EXP_ARREGLO::= DIM_EXPRESIONES
	| LISTA_DIMESNIONES_EXP_ARREGLO coma DIM_EXPRESIONES;

DIMENSIONES_EXPRESION_ARREGLO::= abreLlave LISTA_DIMESNIONES_EXP_ARREGLO cierraLlave;




EXPRESION::=TERNARIO:a{:RESULT = a;:}
	| VAL_EXPRESION:a {:RESULT= a;:};

VAL_EXPRESION::= DIMENSIONES_EXPRESION_ARREGLO
	| ACCESO:a{:RESULT= a;:}
	|cadena:a{:RESULT= new Cadena(a);:}
	|numero_decimal:a{:RESULT= new Decimal(a);:}
	|numero_entero:a{:RESULT= new Entero(a);:}
	|caracter:a{:RESULT= new Caracter(a);:}
	|valBool:a{:RESULT= new Booleano(a);:}
	|VAL_EXPRESION:a mas VAL_EXPRESION:b {:RESULT= new Aritmetica(a,b,"+");:}
	| VAL_EXPRESION:a menos VAL_EXPRESION:b {:RESULT= new Aritmetica(a,b,"-");:}
	|VAL_EXPRESION:a multiplicacion VAL_EXPRESION:b {:RESULT= new Aritmetica(a,b,"*");:}
	| VAL_EXPRESION:a division VAL_EXPRESION:b {:RESULT= new Aritmetica(a,b,"/");:}
	|VAL_EXPRESION:a potencia VAL_EXPRESION:b {:RESULT= new Aritmetica(a,b,"^");:}
	| identificador:a masMas{:RESULT= new Unario(a,"++");:}
	| identificador:a menosMenos{:RESULT= new Unario(a,"--");:}
	| menos VAL_EXPRESION:a{:RESULT= new Negativo(a);:}
	| VAL_EXPRESION:a menor VAL_EXPRESION:b {:RESULT= new Relacional(a,b,"<");:}
	| VAL_EXPRESION:a mayor VAL_EXPRESION:b {:RESULT= new Relacional(a,b,">");:}
	|VAL_EXPRESION:a menorIgual VAL_EXPRESION:b {:RESULT= new Relacional(a,b,"<=");:}
	| VAL_EXPRESION:a mayorIgual VAL_EXPRESION:b {:RESULT= new Relacional(a,b,">=");:}
	| VAL_EXPRESION:a igualIgual VAL_EXPRESION:b {:RESULT= new Relacional(a,b,"==");:}
	|VAL_EXPRESION:a distintoA VAL_EXPRESION:b {:RESULT= new Relacional(a,b,"!=");:}
	|VAL_EXPRESION:a and VAL_EXPRESION:b {:RESULT= new Logica(a,b,"&&");:}
	|VAL_EXPRESION:a or VAL_EXPRESION:b {:RESULT= new Logica(a,b,"||");:}
	|not VAL_EXPRESION:a{:RESULT= new NOT(a);:}
	|abrePar VAL_EXPRESION:a cierraPar {:RESULT = a;:}
	|LLAMADA:a{:RESULT = a;:};
	
PARAMETROS_LLAMADA::= abrePar LISTA_EXPRESION:a cierraPar{:RESULT= a; :}
	| abrePar cierraPar{:RESULT= new ArrayList<objetoBase>(); :};
	
LLAMADA::= identificador:a PARAMETROS_LLAMADA:b {:RESULT = new Llamada(a,b);:};


TERNARIO::= VAL_EXPRESION:a interrogacion VAL_EXPRESION:b dosPuntos VAL_EXPRESION:c
			{:RESULT= new Ternario(a,b,c);:};


CUERPO_FUNCION::= abreLlave cierraLlave {:RESULT = new CuerpoFuncion();:}
	|abreLlave SENTENCIAS:a cierraLlave{:RESULT = new CuerpoFuncion(a);:};

SENTENCIA::= DECLARACION:a {:RESULT= a;:} 
	|ASIGNACION:a puntoComa {:RESULT= a;:} 
	|TERNARIO:a puntoComa {:RESULT= a;:} 
	|SI:a {:RESULT= a;:} 
	|MIENTRAS:a {:RESULT= a;:} 
	|PARA:a {:RESULT= a;:} 
	|DETENER:a {:RESULT= a;:} 
	|CONTINUAR:a {:RESULT= a;:} 
	|RETORNAR:a {:RESULT= a;:} 
	|IMPRIMIR:a {:RESULT= a;:} 
	|ESTRUCTURA:a {:RESULT= a;:} 
	|FUN_NATIVA:a {:RESULT= a;:} 
	|LLAMADA:a puntoComa {:RESULT= a;:} ;
	
SENTENCIAS::= SENTENCIA:a
				{:
					List<objetoBase> lista = new ArrayList<objetoBase>();
					lista.add((objetoBase)a);
					RESULT= lista;
				:}
		|SENTENCIAS:l SENTENCIA:a
				{:
					List<objetoBase> lista = (List<objetoBase>)l;
					lista.add((objetoBase)a);
				    RESULT= lista;
				:};


IF::= si abrePar EXPRESION:a cierraPar  CUERPO_FUNCION:b {:RESULT = new IF(a,b);:};

SINO::= sino CUERPO_FUNCION:a{:RESULT= a;:};

SINO_SI::= sino si abrePar EXPRESION:a cierraPar  CUERPO_FUNCION:b{:RESULT = new IF(a,b);:};

L_SINO_SI::= SINO_SI:a 
		{:
			List<IF> lista= new ArrayList<IF>();
			lista.add((IF)a);
			RESULT= lista;
		:}
	| L_SINO_SI:l SINO_SI:a
		{:
			List<IF> lista= (ArrayList<IF>)l;
			lista.add((IF)a);
			RESULT= lista;
		:};
	
SI::= IF:a {:RESULT= new Si(1,a,new CuerpoFuncion(), new ArrayList<IF>());:}
	| IF:a SINO:b {:RESULT= new Si(2,a,b, new ArrayList<IF>());:}
	| IF:a L_SINO_SI:b {:RESULT= new Si(3,a,new CuerpoFuncion(), b);:}
	| IF:a L_SINO_SI:b SINO:c {:RESULT= new Si(4,a,b, c);:};
	


MIENTRAS::= mientras abrePar EXPRESION:a cierraPar CUERPO_FUNCION:b 
		{:
			RESULT= new Mientras(a,b);
		:};

DECLA_PARA::= DECLARACION:a{:RESULT= a;:}
	|ASIGNACION:a{:RESULT= a;:} puntoComa;

PARA::= para abrePar DECLA_PARA:a  EXPRESION:b puntoComa ASIGNACION:c cierraPar CUERPO_FUNCION:d
	{:RESULT = new Para(a,b,c,d);:};

DETENER::= detener puntoComa{:RESULT= new Detener();:};

CONTINUAR::= continuar puntoComa{:RESULT= new Continuar();:};

RETORNAR::= retornar puntoComa{:RESULT= new Retornar();:}
	|retornar EXPRESION:a puntoComa{:RESULT= new Retornar(a);:};
	
IMPRIMIR::= imprimir abrePar EXPRESION:a cierraPar puntoComa{:RESULT= new Imprimir(a);:};

IMPORTAR::= importar abrePar cadena:a cierraPar puntoComa{:RESULT= new Importar(a);:};


ESTRUCTURA::= estructura identificador abreLlave LISTA_DECLARACIONES cierraLlave
	|estructura identificador abreLlave cierraLlave;

LISTA_DECLARACIONES::= DECLARACION:a
	{:
		List<objetoBase> lista = new ArrayList<>();
		lista.add((objetoBase)a);
		RESULT= lista;
	:}
	|LISTA_DECLARACIONES:l DECLARACION:a
	{:
		List<objetoBase> lista = (ArrayList<objetoBase>)l;
		lista.add((objetoBase)a);
		RESULT= lista;
	:};

FUNCION::= vacio identificador DECLA_PARAMETROS CUERPO_FUNCION
	| TIPO_DATO identificador DECLA_PARAMETROS CUERPO_FUNCION;

PRINCIPAL::= vacio principal DECLA_PARAMETROS CUERPO_FUNCION;
	
DECLA_PARAMETRO::= TIPO_DATO identificador;
LISTA_DECLA_PARAMETROS::= DECLA_PARAMETRO
	| LISTA_DECLA_PARAMETROS coma DECLA_PARAMETRO;
	
DECLA_PARAMETROS::= abrePar cierraPar
	| abrePar LISTA_DECLA_PARAMETROS cierraPar;
	


FUN_NATIVA::= PUNTO
	| CUADRADO
	| OVALO
	| P_CADENA
	| LINEA;

PUNTO::= puntoD abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar puntoComa;

CUADRADO::= cuadrado abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar;


OVALO::= ovalo abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar; 

P_CADENA::= t_cadena  abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION  cierraPar;

LINEA::= linea  abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar;


	










