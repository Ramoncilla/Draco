
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Oct 21 19:19:44 CST 2018
//----------------------------------------------------

package DracoScript.Analizador;

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Sun Oct 21 19:19:44 CST 2018
  */
public class ParserDraco extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserDraco() {super();}

  /** Constructor which sets the default scanner. */
  public ParserDraco(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\005\000\002\005\003\000\002\005\004" +
    "\000\002\006\003\000\002\006\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\004\000\002\010\010\000\002\010\004\000\002\010\011" +
    "\000\002\010\005\000\002\011\007\000\002\011\004\000" +
    "\002\011\004\000\002\012\007\000\002\014\007\000\002" +
    "\015\003\000\002\015\004\000\002\016\003\000\002\016" +
    "\004\000\002\016\004\000\002\016\005\000\002\013\004" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\021\015\000\002" +
    "\020\016\000\002\022\016\000\002\023\014\000\002\024" +
    "\020\000\002\025\004\000\002\026\007\000\002\027\007" +
    "\000\002\031\003\000\002\031\004\000\002\030\012\000" +
    "\002\033\007\000\002\032\007\000\002\032\011\000\002" +
    "\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\034\011\036\020\041\023\035\024\032\025" +
    "\025\026\006\027\023\030\034\031\037\032\026\033\024" +
    "\034\011\064\043\001\002\000\040\002\uffdd\011\uffdd\013" +
    "\uffdd\020\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\064\uffdd\001" +
    "\002\000\040\002\uffe1\011\uffe1\013\uffe1\020\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\064\uffe1\001\002\000\004\014\243" +
    "\001\002\000\040\002\ufff8\011\ufff8\013\ufff8\020\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\064\ufff8\001\002\000\040\002" +
    "\ufffd\011\ufffd\013\ufffd\020\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\064\ufffd\001\002\000\004\014\232\001\002\000\040" +
    "\002\ufffb\011\ufffb\013\ufffb\020\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\064\ufffb\001\002\000\036\002\000\011\036\020" +
    "\041\023\035\024\032\025\025\026\006\027\023\030\034" +
    "\031\037\032\026\033\024\034\011\064\043\001\002\000" +
    "\040\002\ufff4\011\ufff4\013\ufff4\020\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\064\ufff4\001\002\000\006\017\224\036\223" +
    "\001\002\000\040\002\uffe0\011\uffe0\013\uffe0\020\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\064\uffe0\001\002\000\040\002" +
    "\ufff5\011\ufff5\013\ufff5\020\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\064\ufff5\001\002\000\044\002\uffe6\011\uffe6\013\uffe6" +
    "\020\uffe6\021\207\022\213\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\064\uffe6\001\002\000\040\002\uffde\011\uffde\013\uffde\020" +
    "\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\064\uffde\001\002\000" +
    "\040\002\ufff7\011\ufff7\013\ufff7\020\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\064\ufff7\001\002\000\004\014\170\001\002" +
    "\000\004\014\153\001\002\000\004\014\141\001\002\000" +
    "\004\014\126\001\002\000\004\017\125\001\002\000\040" +
    "\002\ufff3\011\ufff3\013\ufff3\020\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\064\ufff3\001\002\000\040\002\ufff9\011\ufff9\013" +
    "\ufff9\020\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\064\ufff9\001" +
    "\002\000\004\014\121\001\002\000\040\002\uffdf\011\uffdf" +
    "\013\uffdf\020\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\064\uffdf" +
    "\001\002\000\004\014\107\001\002\000\004\017\106\001" +
    "\002\000\004\064\101\001\002\000\004\014\066\001\002" +
    "\000\040\002\ufff6\011\ufff6\013\ufff6\020\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\064\ufff6\001\002\000\004\014\055\001" +
    "\002\000\004\002\054\001\002\000\010\016\045\040\046" +
    "\041\044\001\002\000\006\015\uffeb\017\uffeb\001\002\000" +
    "\004\062\047\001\002\000\006\015\uffec\017\uffec\001\002" +
    "\000\004\016\050\001\002\000\006\065\051\066\053\001" +
    "\002\000\010\015\uffcd\017\uffcd\036\uffcd\001\002\000\006" +
    "\015\uffed\017\uffed\001\002\000\010\015\uffce\017\uffce\036" +
    "\uffce\001\002\000\004\002\001\001\002\000\006\065\051" +
    "\066\053\001\002\000\004\015\057\001\002\000\004\012" +
    "\061\001\002\000\044\002\uffea\011\uffea\013\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\064\uffea" +
    "\001\002\000\036\011\036\013\063\020\041\023\035\024" +
    "\032\025\025\026\006\027\023\030\034\031\037\032\026" +
    "\033\024\034\011\064\043\001\002\000\036\011\036\013" +
    "\065\020\041\023\035\024\032\025\025\026\006\027\023" +
    "\030\034\031\037\032\026\033\024\034\011\064\043\001" +
    "\002\000\044\002\uffff\011\uffff\013\uffff\020\uffff\021\uffff" +
    "\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030" +
    "\uffff\031\uffff\032\uffff\033\uffff\034\uffff\064\uffff\001\002" +
    "\000\040\002\ufffc\011\ufffc\013\ufffc\020\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc" +
    "\033\ufffc\034\ufffc\064\ufffc\001\002\000\044\002\ufffe\011" +
    "\ufffe\013\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\064\ufffe\001\002\000\006\065\051\066\053" +
    "\001\002\000\004\036\070\001\002\000\006\065\051\066" +
    "\053\001\002\000\004\036\072\001\002\000\006\065\051" +
    "\066\053\001\002\000\004\036\074\001\002\000\006\065" +
    "\051\066\053\001\002\000\004\036\076\001\002\000\006" +
    "\065\051\066\053\001\002\000\004\015\100\001\002\000" +
    "\040\002\uffdb\011\uffdb\013\uffdb\020\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\064\uffdb\001\002\000\010\016\102\017\ufff0" +
    "\036\ufff0\001\002\000\004\062\103\001\002\000\004\016" +
    "\104\001\002\000\006\065\051\066\053\001\002\000\006" +
    "\017\ufff1\036\ufff1\001\002\000\040\002\uffd7\011\uffd7\013" +
    "\uffd7\020\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\064\uffd7\001" +
    "\002\000\006\065\051\066\053\001\002\000\004\036\111" +
    "\001\002\000\006\065\051\066\053\001\002\000\004\036" +
    "\113\001\002\000\006\065\051\066\053\001\002\000\004" +
    "\036\115\001\002\000\006\065\051\066\053\001\002\000" +
    "\004\015\117\001\002\000\004\017\120\001\002\000\040" +
    "\002\uffdc\011\uffdc\013\uffdc\020\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\064\uffdc\001\002\000\006\065\051\066\053\001" +
    "\002\000\004\015\123\001\002\000\004\012\061\001\002" +
    "\000\040\002\uffd5\011\uffd5\013\uffd5\020\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\064\uffd5\001\002\000\040\002\ufffa\011" +
    "\ufffa\013\ufffa\020\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\064" +
    "\ufffa\001\002\000\006\065\051\066\053\001\002\000\004" +
    "\036\130\001\002\000\006\065\051\066\053\001\002\000" +
    "\004\036\132\001\002\000\006\065\051\066\053\001\002" +
    "\000\004\036\134\001\002\000\006\065\051\066\053\001" +
    "\002\000\004\036\136\001\002\000\006\065\051\066\053" +
    "\001\002\000\004\015\140\001\002\000\040\002\uffda\011" +
    "\uffda\013\uffda\020\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\064" +
    "\uffda\001\002\000\006\011\036\064\043\001\002\000\004" +
    "\017\152\001\002\000\006\065\uffd4\066\uffd4\001\002\000" +
    "\006\065\051\066\053\001\002\000\004\017\146\001\002" +
    "\000\004\064\043\001\002\000\004\015\150\001\002\000" +
    "\004\012\061\001\002\000\040\002\uffd2\011\uffd2\013\uffd2" +
    "\020\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\064\uffd2\001\002" +
    "\000\006\065\uffd3\066\uffd3\001\002\000\006\065\051\066" +
    "\053\001\002\000\004\036\155\001\002\000\006\065\051" +
    "\066\053\001\002\000\004\036\157\001\002\000\006\065" +
    "\051\066\053\001\002\000\004\036\161\001\002\000\006" +
    "\065\051\066\053\001\002\000\004\036\163\001\002\000" +
    "\006\065\051\066\053\001\002\000\004\036\165\001\002" +
    "\000\006\065\051\066\053\001\002\000\004\015\167\001" +
    "\002\000\040\002\uffd8\011\uffd8\013\uffd8\020\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\064\uffd8\001\002\000\004\070\171" +
    "\001\002\000\004\064\203\001\002\000\006\015\174\036" +
    "\173\001\002\000\004\070\176\001\002\000\004\017\175" +
    "\001\002\000\040\002\uffd1\011\uffd1\013\uffd1\020\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\064\uffd1\001\002\000\004\064" +
    "\177\001\002\000\004\037\200\001\002\000\004\071\201" +
    "\001\002\000\004\070\202\001\002\000\006\015\uffcf\036" +
    "\uffcf\001\002\000\004\037\204\001\002\000\004\071\205" +
    "\001\002\000\004\070\206\001\002\000\006\015\uffd0\036" +
    "\uffd0\001\002\000\004\012\061\001\002\000\044\002\uffe8" +
    "\011\uffe8\013\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\064\uffe8\001\002\000\044\002\uffe4\011" +
    "\uffe4\013\uffe4\020\uffe4\021\207\022\213\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\064\uffe4\001\002\000\040\002\uffe5\011\uffe5" +
    "\013\uffe5\020\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\064\uffe5" +
    "\001\002\000\004\014\214\001\002\000\006\065\051\066" +
    "\053\001\002\000\004\015\216\001\002\000\004\012\061" +
    "\001\002\000\044\002\uffe9\011\uffe9\013\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\064\uffe9\001" +
    "\002\000\044\002\uffe7\011\uffe7\013\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\064\uffe7\001\002" +
    "\000\040\002\uffe3\011\uffe3\013\uffe3\020\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\064\uffe3\001\002\000\040\002\uffe2\011" +
    "\uffe2\013\uffe2\020\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\064" +
    "\uffe2\001\002\000\004\064\225\001\002\000\044\002\ufff2" +
    "\011\ufff2\013\ufff2\020\ufff2\023\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\064\ufff2\065\ufff2\066\ufff2\001\002\000\010\016\226\017" +
    "\uffee\036\uffee\001\002\000\004\062\227\001\002\000\004" +
    "\016\230\001\002\000\006\065\051\066\053\001\002\000" +
    "\006\017\uffef\036\uffef\001\002\000\006\065\051\066\053" +
    "\001\002\000\004\036\234\001\002\000\006\065\051\066" +
    "\053\001\002\000\004\036\236\001\002\000\006\065\051" +
    "\066\053\001\002\000\004\036\240\001\002\000\006\065" +
    "\051\066\053\001\002\000\004\015\242\001\002\000\040" +
    "\002\uffd9\011\uffd9\013\uffd9\020\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\064\uffd9\001\002\000\006\065\051\066\053\001" +
    "\002\000\004\015\245\001\002\000\004\017\246\001\002" +
    "\000\040\002\uffd6\011\uffd6\013\uffd6\020\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\064\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\050\003\041\005\012\006\007\007\011\010" +
    "\014\011\026\012\017\016\030\017\006\020\015\021\004" +
    "\022\032\023\020\024\003\025\016\026\013\027\037\030" +
    "\021\033\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\006\063\007\011" +
    "\010\014\011\026\012\017\016\030\017\006\020\015\021" +
    "\004\022\032\023\020\024\003\025\016\026\013\027\037" +
    "\030\021\033\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\211" +
    "\014\207\015\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\055\001\001\000\002\001\001" +
    "\000\004\004\057\001\001\000\002\001\001\000\046\005" +
    "\061\006\007\007\011\010\014\011\026\012\017\016\030" +
    "\017\006\020\015\021\004\022\032\023\020\024\003\025" +
    "\016\026\013\027\037\030\021\033\027\001\001\000\044" +
    "\006\063\007\011\010\014\011\026\012\017\016\030\017" +
    "\006\020\015\021\004\022\032\023\020\024\003\025\016" +
    "\026\013\027\037\030\021\033\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\066" +
    "\001\001\000\002\001\001\000\004\034\070\001\001\000" +
    "\002\001\001\000\004\034\072\001\001\000\002\001\001" +
    "\000\004\034\074\001\001\000\002\001\001\000\004\034" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\107\001\001\000\002\001\001\000\004\034\111\001" +
    "\001\000\002\001\001\000\004\034\113\001\001\000\002" +
    "\001\001\000\004\034\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\121\001\001" +
    "\000\002\001\001\000\004\004\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\126\001\001\000\002" +
    "\001\001\000\004\034\130\001\001\000\002\001\001\000" +
    "\004\034\132\001\001\000\002\001\001\000\004\034\134" +
    "\001\001\000\002\001\001\000\004\034\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\142\010\014" +
    "\011\141\031\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\144\001\001\000\002\001\001\000\004" +
    "\011\146\001\001\000\002\001\001\000\004\004\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\153" +
    "\001\001\000\002\001\001\000\004\034\155\001\001\000" +
    "\002\001\001\000\004\034\157\001\001\000\002\001\001" +
    "\000\004\034\161\001\001\000\002\001\001\000\004\034" +
    "\163\001\001\000\002\001\001\000\004\034\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\221\001\001\000\002" +
    "\001\001\000\006\013\220\014\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\214\001\001\000\002" +
    "\001\001\000\004\004\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\230\001\001\000\002" +
    "\001\001\000\004\034\232\001\001\000\002\001\001\000" +
    "\004\034\234\001\001\000\002\001\001\000\004\034\236" +
    "\001\001\000\002\001\001\000\004\034\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDraco$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDraco$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDraco$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;

	

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserDraco$actions {






  private final ParserDraco parser;

  /** Constructor */
  CUP$ParserDraco$actions(ParserDraco parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserDraco$do_action(
    int                        CUP$ParserDraco$act_num,
    java_cup.runtime.lr_parser CUP$ParserDraco$parser,
    java.util.Stack            CUP$ParserDraco$stack,
    int                        CUP$ParserDraco$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDraco$result;

      /* select the action based on the action number */
      switch (CUP$ParserDraco$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= numero_entero 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(26/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= numero_decimal 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(26/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LISTA_RUN ::= LISTA_RUN coma comillaSimple identificador punto dasm comillaSimple 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(24/*LISTA_RUN*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_RUN ::= comillaSimple identificador punto dasm comillaSimple 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(24/*LISTA_RUN*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RUM_DASM ::= runMultDasm abrePar LISTA_RUN cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(25/*RUM_DASM*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARA ::= t_for abrePar DECLA_PARA EXPRESION puntoComa ASIGNACION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(22/*PARA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLA_PARA ::= ASIGNACION puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(23/*DECLA_PARA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLA_PARA ::= DECLARACION 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(23/*DECLA_PARA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MIENTRAS ::= t_while abrePar EXPRESION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(21/*MIENTRAS*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IMPRIMIR ::= print abrePar EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(20/*IMPRIMIR*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SMASH ::= smash puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(19/*SMASH*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LINEA ::= line abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(18/*LINEA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-13)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // P_CADENA ::= t_String abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(17/*P_CADENA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OVALO ::= oval abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(16/*OVALO*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-11)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUADRADO ::= quadrate abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(14/*CUADRADO*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-11)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PUNTO ::= point abrePar EXPRESION coma EXPRESION coma EXPRESION coma EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(15/*PUNTO*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-10)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUN_NATIVA ::= LINEA 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(13/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUN_NATIVA ::= P_CADENA 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(13/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUN_NATIVA ::= OVALO 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(13/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUN_NATIVA ::= CUADRADO 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(13/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUN_NATIVA ::= PUNTO 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(13/*FUN_NATIVA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SINO ::= notIf CUERPO_FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(9/*SINO*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SI ::= IF L_SINO_SI SINO 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(12/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SI ::= IF L_SINO_SI 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(12/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SI ::= IF SINO 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(12/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SI ::= IF 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(12/*SI*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_SINO_SI ::= L_SINO_SI SINO_SI 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(11/*L_SINO_SI*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_SINO_SI ::= SINO_SI 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(11/*L_SINO_SI*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SINO_SI ::= elif abrePar EXPRESION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(10/*SINO_SI*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF ::= si abrePar EXPRESION cierraPar CUERPO_FUNCION 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(8/*IF*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= identificador menosMenos 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(7/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACION ::= identificador masMas 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(7/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACION ::= identificador dosPuntos igual dosPuntos EXPRESION 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(7/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_ID_ASIGNA ::= LISTA_ID_ASIGNA coma identificador 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(6/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_ID_ASIGNA ::= LISTA_ID_ASIGNA coma identificador dosPuntos igual dosPuntos EXPRESION 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(6/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA_ID_ASIGNA ::= var identificador 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(6/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA_ID_ASIGNA ::= var identificador dosPuntos igual dosPuntos EXPRESION 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(6/*LISTA_ID_ASIGNA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= LISTA_ID_ASIGNA puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(5/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= RUM_DASM 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SMASH 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= PARA 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= FUN_NATIVA 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SI 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= ASIGNACION puntoComa 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(3/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(3/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO_FUNCION ::= abreLlave SENTENCIAS cierraLlave 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(2/*CUERPO_FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO_FUNCION ::= abreLlave cierraLlave 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(2/*CUERPO_FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT = null;

              CUP$ParserDraco$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          return CUP$ParserDraco$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).value;
		RESULT = start_val;
              CUP$ParserDraco$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserDraco$stack.elementAt(CUP$ParserDraco$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ParserDraco$parser.done_parsing();
          return CUP$ParserDraco$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

