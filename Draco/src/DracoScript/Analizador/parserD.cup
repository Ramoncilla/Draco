package  DracoScript.Analizador;


import zEjecucionDraco.Sentencias.*;
import zEjecucionDraco.Expresion.*;
import zEjecucionDraco.*;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;


parser code
{:
 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	public static CuerpoFuncion sentenciasArchivo;

	

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}

:}


action code
{:



:}


/*-------- Terminales ---------------*/


terminal String t_entero,
	t_decimal,
	t_cadena,
	t_caracter,
	t_booleano,
	var, 
	abreLlave, 
	cierraLlave,
	abrePar,
	cierraPar,
	dosPuntos,
	puntoComa,
	si,
	notIf,
	elif,
	smash,
	t_while,
	t_for,
	print,
	runMultDasm,
	point,
	quadrate,
	oval, 
	line,
	t_String,
	nulo,
    coma, 
	punto,
	masMas, 
	menosMenos,
	mas, 
	menos, 
	multiplicacion, 
	division, 
	potencia, 
	residuo,
	menor, 
	mayor, 
	menorIgual,
	mayorIgual,
	igualIgual, 
	distintoA, 
	and,
	or, 
	not, 
	valBool,
	igual, 
	cadena, 
	identificador, 
	numero_entero, 
	numero_decimal,
	caracter,
	comillaSimple,
	dasm;

	non terminal INICIO;
	
	non terminal CUERPO_FUNCION, SENTENCIAS, SENTENCIA, DECLARACION, LISTA_ID_ASIGNA, ASIGNACION, IF, SINO, SINO_SI,L_SINO_SI, SI, FUN_NATIVA, CUADRADO, PUNTO, OVALO, P_CADENA, LINEA, SMASH, IMPRIMIR, MIENTRAS, PARA, DECLA_PARA, LISTA_RUN, RUM_DASM, EXPRESION, SI_, VAL_EXPRESION;
	
	
     	precedence left or;
		precedence left and;
		precedence left not;
		precedence left igualIgual, distintoA, menorIgual, mayorIgual,mayor, menor;
		precedence left mas, menos;
        precedence left multiplicacion, division,residuo;
        precedence right potencia;
		precedence left masMas, menosMenos;
		precedence left abrePar;
        
	
	start with INICIO;	

INICIO::= SENTENCIAS:a{:parser.sentenciasArchivo= new CuerpoFuncion(a);:};

CUERPO_FUNCION::= abreLlave cierraLlave{:RESULT= new CuerpoFuncion();:}
	| abreLlave SENTENCIAS:a cierraLlave{:RESULT= new CuerpoFuncion(a);:};

SENTENCIAS::= SENTENCIA:a
		{:
			List<baseDraco> lista = new ArrayList<baseDraco>();
			lista.add((baseDraco)a);
			RESULT= lista;
		:}
	|SENTENCIAS:l SENTENCIA:a
		{:
			List<baseDraco> lista = (ArrayList<baseDraco>)l;
			lista.add((baseDraco)a);
			RESULT= lista;
		:};

SENTENCIA::= DECLARACION :a {:RESULT= a;:}
	|ASIGNACION:a puntoComa {:RESULT= a;:}
	|SI:a {:RESULT= a;:}
	|FUN_NATIVA:a {:RESULT= a;:}
	|PARA:a {:RESULT= a;:}
	|MIENTRAS:a {:RESULT= a;:}
	|SMASH:a {:RESULT= a;:}
	|IMPRIMIR:a {:RESULT= a;:}
	|RUM_DASM:a {:RESULT= a;:};

DECLARACION::= LISTA_ID_ASIGNA:a puntoComa{:RESULT=a;:};

LISTA_ID_ASIGNA::= var identificador:a dosPuntos igual dosPuntos EXPRESION:b
		{:
			Asignacion asigna = new Asignacion(a,b);
			Declaracion decla = new Declaracion();
			DeclaAsigna dec = new DeclaAsigna(a, asigna);
			decla.addDecla(dec);
			RESULT= decla;
		:}
	| var identificador:a
		{:
			Declaracion decla = new Declaracion();
			DeclaAsigna dec = new DeclaAsigna(a);
			decla.addDecla(dec);
			RESULT= decla;
		:}
	| LISTA_ID_ASIGNA:l coma identificador:a dosPuntos igual dosPuntos EXPRESION:b
		{:
			Asignacion asigna = new Asignacion(a,b);
			Declaracion decla = (Declaracion)l;
			DeclaAsigna dec = new DeclaAsigna(a, asigna);
			decla.addDecla(dec);
			RESULT= decla;
		:}
	
	| LISTA_ID_ASIGNA:l coma identificador:a
		{:
			Declaracion decla = (Declaracion)l;
			DeclaAsigna dec = new DeclaAsigna(a);
			decla.addDecla(dec);
			RESULT= decla;
		:};
	
	
ASIGNACION::= identificador:a dosPuntos igual dosPuntos EXPRESION:b 
		{:
			Asignacion asigna = new Asignacion(a,b);
			RESULT= asigna;
		:}
	|identificador:a masMas
		{:
			Aritmetica n = new Aritmetica(new Identificador(a), new Entero(1), "+");
			Asignacion asigna = new Asignacion(a,n);
			RESULT= asigna;
		:}
	|identificador:a menosMenos
		{:
			Aritmetica n = new Aritmetica(new Identificador(a), new Entero(1), "-");
			Asignacion asigna = new Asignacion(a,n);
			RESULT= asigna;
		:};

IF::= si abrePar EXPRESION cierraPar  CUERPO_FUNCION;

SINO_SI::= elif abrePar EXPRESION cierraPar  CUERPO_FUNCION;

L_SINO_SI::= SINO_SI
	| L_SINO_SI SINO_SI;
	
SI::=IF 
	|IF SINO
	|IF L_SINO_SI
	|IF L_SINO_SI SINO ;

SINO::= notIf CUERPO_FUNCION;
		
	
FUN_NATIVA::= PUNTO:a {:RESULT= a;:}
	| CUADRADO:a {:RESULT= a;:}
	| OVALO:a {:RESULT= a;:}
	| P_CADENA:a {:RESULT= a;:}
	| LINEA:a {:RESULT= a;:};

PUNTO::= point abrePar EXPRESION:a coma EXPRESION:b coma EXPRESION:c coma EXPRESION:d cierraPar puntoComa{:RESULT= new Punto(a,b,c,d);:};

CUADRADO::= quadrate abrePar EXPRESION:a coma EXPRESION:b coma EXPRESION:c coma EXPRESION:d coma EXPRESION:e cierraPar{:RESULT= new Cuadrado(a,b,c,d,e);:};


OVALO::= oval abrePar EXPRESION:a coma EXPRESION:b coma EXPRESION:c coma EXPRESION:d coma EXPRESION:e cierraPar{:RESULT= new Ovalo(a,b,c,d,e);:}; 

P_CADENA::= t_String  abrePar EXPRESION:a coma EXPRESION:b coma EXPRESION:c coma EXPRESION:d  cierraPar{:RESULT= new P_Cadena(a,b,c,d);:};

LINEA::= line  abrePar EXPRESION:a coma EXPRESION:b coma EXPRESION:c coma EXPRESION:d coma EXPRESION:e coma EXPRESION:f cierraPar{:RESULT= new Linea(a,b,c,d,e,f);:};

SMASH::= smash puntoComa{:RESULT = new Smash();:};

IMPRIMIR::= print abrePar EXPRESION:a cierraPar puntoComa{:RESULT= new Imprimir(a);:};

MIENTRAS::= t_while abrePar EXPRESION:a cierraPar CUERPO_FUNCION:b{:RESULT= new Mientras(a,b);:};

DECLA_PARA::= DECLARACION:a {:RESULT= a;:}
	| ASIGNACION:a puntoComa {:RESULT= a;:};
	
PARA::= t_for abrePar DECLA_PARA:a EXPRESION:b puntoComa ASIGNACION:c cierraPar CUERPO_FUNCION:d {:RESULT= new Para(a,b,c,d);:};

RUM_DASM::= runMultDasm abrePar LISTA_RUN:a cierraPar puntoComa{:RESULT= new Run_Dasm(a); :};

LISTA_RUN::= comillaSimple identificador:a punto dasm comillaSimple
		{:
			List<String> nombres = new ArrayList<>();
			nombres.add(a.toString());
			RESULT= nombres;
		:}
	|LISTA_RUN:l coma comillaSimple identificador:a punto dasm comillaSimple
		{:
			List<String> nombres = (ArrayList<String>)l;
			nombres.add(a.toString());
			RESULT= nombres;
		:};

		
EXPRESION::= VAL_EXPRESION:a {:RESULT= a;:};

VAL_EXPRESION::=cadena:a{:RESULT= new Cadena(a);:}
	|numero_decimal:a{:RESULT= new Decimal(a);:}
	|numero_entero:a{:RESULT= new Entero(a);:}
	|caracter:a{:RESULT= new Caracter(a);:}
	|valBool:a{:RESULT= new Booleano(a);:}
	|VAL_EXPRESION:a mas VAL_EXPRESION:b {:RESULT= new Aritmetica(a,b,"+");:}
	| VAL_EXPRESION:a menos VAL_EXPRESION:b {:RESULT= new Aritmetica(a,b,"-");:}
	|VAL_EXPRESION:a multiplicacion VAL_EXPRESION:b {:RESULT= new Aritmetica(a,b,"*");:}
	| VAL_EXPRESION:a division VAL_EXPRESION:b {:RESULT= new Aritmetica(a,b,"/");:}
	|VAL_EXPRESION:a potencia VAL_EXPRESION:b {:RESULT= new Aritmetica(a,b,"^");:}
	| identificador:a masMas{:RESULT= new Aritmetica(a,new Entero(1),"+");:}
	| identificador:a menosMenos{:RESULT= new Aritmetica(a,new Entero(1),"-");:}
	| menos VAL_EXPRESION:a{:RESULT= new Aritmetica(a,new Entero(-1),"*");:}
	| VAL_EXPRESION:a menor VAL_EXPRESION:b {:RESULT= new Relacional(a,b,"<");:}
	| VAL_EXPRESION:a mayor VAL_EXPRESION:b {:RESULT= new Relacional(a,b,">");:}
	|VAL_EXPRESION:a menorIgual VAL_EXPRESION:b {:RESULT= new Relacional(a,b,"<=");:}
	| VAL_EXPRESION:a mayorIgual VAL_EXPRESION:b {:RESULT= new Relacional(a,b,">=");:}
	| VAL_EXPRESION:a igualIgual VAL_EXPRESION:b {:RESULT= new Relacional(a,b,"==");:}
	|VAL_EXPRESION:a distintoA VAL_EXPRESION:b {:RESULT= new Relacional(a,b,"!=");:}
	|VAL_EXPRESION:a and VAL_EXPRESION:b {:RESULT= new Logica(a,b,"&&");:}
	|VAL_EXPRESION:a or VAL_EXPRESION:b {:RESULT= new Logica(a,b,"||");:}
	|not VAL_EXPRESION:a{:RESULT= new Not(a);:}
	|abrePar VAL_EXPRESION:a cierraPar {:RESULT = a;:}
	|identificador:a{:RESULT = new Identificador(a);:};		
