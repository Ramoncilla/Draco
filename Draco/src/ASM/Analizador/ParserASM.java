
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Oct 25 00:43:18 CST 2018
//----------------------------------------------------

package ASM.Analizador;

import ASM.Arbol.*;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Thu Oct 25 00:43:18 CST 2018
  */
public class ParserASM extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserASM() {super();}

  /** Constructor which sets the default scanner. */
  public ParserASM(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\003\003\000\002\005" +
    "\003\000\002\005\004\000\002\004\007\000\002\004\006" +
    "\000\002\006\003\000\002\006\004\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\004\000\002\010\006\000\002" +
    "\010\004\000\002\010\005\000\002\010\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\060\015\023\016\020\017\012\020\021\021" +
    "\033\022\005\023\013\024\024\025\030\026\027\027\035" +
    "\030\006\032\036\033\010\034\026\035\007\036\017\037" +
    "\014\040\025\041\004\042\015\043\031\044\022\001\002" +
    "\000\062\002\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037" +
    "\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\001\002" +
    "\000\062\002\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\001\002" +
    "\000\062\002\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\001\002" +
    "\000\012\024\024\025\030\026\027\036\017\001\002\000" +
    "\012\024\024\025\030\026\027\036\017\001\002\000\062" +
    "\002\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002\000\062" +
    "\002\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\001\002\000\004" +
    "\024\053\001\002\000\062\002\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee" +
    "\044\uffee\001\002\000\062\002\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\001\002\000\062\002\000\015\023\016\020\017" +
    "\012\020\021\021\033\022\005\023\013\024\024\025\030" +
    "\026\027\027\035\030\006\032\036\033\010\034\026\035" +
    "\007\036\017\037\014\040\025\041\004\042\015\043\031" +
    "\044\022\001\002\000\006\025\050\026\051\001\002\000" +
    "\062\002\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\001\002\000" +
    "\062\002\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\001\002\000" +
    "\004\027\045\001\002\000\062\002\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\001\002\000\004\031\044\001\002\000\062" +
    "\002\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\044\uffed\001\002\000\012" +
    "\024\024\025\030\026\027\036\017\001\002\000\062\002" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\001\002\000\062\002" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\001\002\000\004\027" +
    "\042\001\002\000\062\002\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\001\002\000\062\002\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\001\002\000\004\002\041\001\002\000\004\010\040" +
    "\001\002\000\012\024\024\025\030\026\027\036\017\001" +
    "\002\000\062\002\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\001" +
    "\002\000\062\002\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\001" +
    "\002\000\004\002\001\001\002\000\062\002\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\001\002\000\062\002\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\001\002\000\062\002\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\001\002\000\004\043\046\001\002" +
    "\000\004\027\047\001\002\000\062\002\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\001\002\000\062\002\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\001\002\000\062\002\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\001\002\000\062\002\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\030\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\001\002\000\004\027\054\001\002\000" +
    "\062\002\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\001\002\000" +
    "\062\002\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\001\002\000" +
    "\062\002\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\012\003\033\006\015\007\031\010\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\055\001\001\000\004\007\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\031\010\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserASM$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserASM$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserASM$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	//public static ListaFunciones funcionesArchivo;
	public static CuerpoFuncion sentenciasArchivo;

	

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserASM$actions {


//Operaciones_Listas operaciones = new Operaciones_Listas();



  private final ParserASM parser;

  /** Constructor */
  CUP$ParserASM$actions(ParserASM parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserASM$do_action(
    int                        CUP$ParserASM$act_num,
    java_cup.runtime.lr_parser CUP$ParserASM$parser,
    java.util.Stack            CUP$ParserASM$stack,
    int                        CUP$ParserASM$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserASM$result;

      /* select the action based on the action number */
      switch (CUP$ParserASM$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR ::= menos numero_entero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		RESULT = new Decimal("-"+a);
              CUP$ParserASM$result = new java_cup.runtime.Symbol(5/*VALOR*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR ::= menos numero_decimal 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		RESULT = new Decimal("-"+a);
              CUP$ParserASM$result = new java_cup.runtime.Symbol(5/*VALOR*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR ::= dolar calc 
            {
              Object RESULT = null;
		RESULT= new Calc();
              CUP$ParserASM$result = new java_cup.runtime.Symbol(5/*VALOR*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR ::= numero_entero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		RESULT = new Entero(a);
              CUP$ParserASM$result = new java_cup.runtime.Symbol(5/*VALOR*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= numero_decimal 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		RESULT = new Decimal(a);
              CUP$ParserASM$result = new java_cup.runtime.Symbol(5/*VALOR*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= end 
            {
              Object RESULT = null;
		RESULT= new FinFuncion();
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= function dolar identificador 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		RESULT= new InicioFuncion(a);
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= identificador dosPuntos 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).value;
		RESULT= new ETIQUETA(a);
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= br_if identificador br identificador 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		RESULT= new BR_IF(a,b);
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= br identificador 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		RESULT= new BR(a);
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= gte 
            {
              Object RESULT = null;
		RESULT= new REL(">=");
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= lte 
            {
              Object RESULT = null;
		RESULT= new REL("<=");
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= gt 
            {
              Object RESULT = null;
		RESULT= new REL(">");
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= lt 
            {
              Object RESULT = null;
		RESULT= new REL("<");
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= get_local VALOR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		RESULT= new Get_local(a);
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= get_global VALOR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		RESULT= new Get_global(a);
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= set_local VALOR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		RESULT= new Set_local(a);
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= set_global VALOR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		RESULT= new Set_global(a);
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= print 
            {
              Object RESULT = null;
		RESULT= new PRINT();
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= mod 
            {
              Object RESULT = null;
		RESULT= new MOD();
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= div 
            {
              Object RESULT = null;
		RESULT= new DIV();
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= mult 
            {
              Object RESULT = null;
		RESULT= new MULT();
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= diff 
            {
              Object RESULT = null;
		RESULT= new DIFF();
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= add 
            {
              Object RESULT = null;
		RESULT= new ADD();
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= VALOR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		RESULT= a;
              CUP$ParserASM$result = new java_cup.runtime.Symbol(6/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_VALORES ::= LISTA_VALORES SENTENCIA 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		
			CuerpoFuncion c = (CuerpoFuncion)l;
			c.insertar(a);
			RESULT= c;
		
              CUP$ParserASM$result = new java_cup.runtime.Symbol(4/*LISTA_VALORES*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_VALORES ::= SENTENCIA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		
			CuerpoFuncion c = new CuerpoFuncion();
			c.insertar(a);
			RESULT= c;
		
              CUP$ParserASM$result = new java_cup.runtime.Symbol(4/*LISTA_VALORES*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= function dolar identificador end 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).value;
		RESULT= new Funcion(a, new CuerpoFuncion());
              CUP$ParserASM$result = new java_cup.runtime.Symbol(2/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION ::= function dolar identificador LISTA_VALORES end 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).value;
		RESULT = new Funcion(a, b);
              CUP$ParserASM$result = new java_cup.runtime.Symbol(2/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_FUNCIONES ::= LISTA_FUNCIONES FUNCION 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		
			ListaFunciones c = (ListaFunciones)l;
			c.insertar(a);
			RESULT= c;
		
              CUP$ParserASM$result = new java_cup.runtime.Symbol(3/*LISTA_FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_FUNCIONES ::= FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		
			ListaFunciones c = new ListaFunciones();
			c.insertar(a);
			RESULT= c;
		
              CUP$ParserASM$result = new java_cup.runtime.Symbol(3/*LISTA_FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA_VALORES 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).value;
		 parser.sentenciasArchivo= (CuerpoFuncion)a;
              CUP$ParserASM$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          return CUP$ParserASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).value;
		RESULT = start_val;
              CUP$ParserASM$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserASM$stack.elementAt(CUP$ParserASM$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ParserASM$parser.done_parsing();
          return CUP$ParserASM$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

