package ASM.Analizador;

import ASM.Arbol.*;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;


parser code
{:
 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	public static ListaFunciones funcionesArchivo;

	

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				
}

:}


action code
{:
//Operaciones_Listas operaciones = new Operaciones_Listas();


:}


/*-------- Terminales ---------------*/

terminal String abreLlave,
cierraLlave, 
abrePar, 
cierraPar,
dosPuntos,
puntoComa,
nulo,
coma,
punto,
add,
diff,
mult,
div,
mod,
print,
function,
dolar,
numero_entero,
numero_decimal,
identificador,
end,
calc, set_local, get_local, set_global, get_global,menos,lt,gt,lte,gte,br,br_if;


non terminal INICIO;

non terminal FUNCION, LISTA_FUNCIONES, LISTA_VALORES, VALOR, SENTENCIA;



start with INICIO;	


INICIO::= LISTA_FUNCIONES:a {:parser.funcionesArchivo= (ListaFunciones)a;:};

LISTA_FUNCIONES::= FUNCION:a
		{:
			ListaFunciones c = new ListaFunciones();
			c.insertar(a);
			RESULT= c;
		:}
	|LISTA_FUNCIONES:l FUNCION:a
		{:
			ListaFunciones c = (ListaFunciones)l;
			c.insertar(a);
			RESULT= c;
		:};

FUNCION::= function dolar identificador:a LISTA_VALORES:b end {:RESULT = new Funcion(a, b);:}
	|function dolar identificador:a end {:RESULT= new Funcion(a, new CuerpoFuncion());:};

	
LISTA_VALORES::= SENTENCIA:a
		{:
			CuerpoFuncion c = new CuerpoFuncion();
			c.insertar(a);
			RESULT= c;
		:}
	|LISTA_VALORES:l SENTENCIA:a
		{:
			CuerpoFuncion c = (CuerpoFuncion)l;
			c.insertar(a);
			RESULT= c;
		:};

		
SENTENCIA::= VALOR:a{:RESULT= a;:}
	|add {:RESULT= new ADD();:}
	|diff {:RESULT= new DIFF();:}
	|mult {:RESULT= new MULT();:}
	|div {:RESULT= new DIV();:}
	|mod {:RESULT= new MOD();:}
	|print{:RESULT= new PRINT();:}
	|set_global VALOR:a{:RESULT= new Set_global(a);:}
	|set_local VALOR:a{:RESULT= new Set_local(a);:}
	|get_global VALOR:a{:RESULT= new Get_global(a);:}
	|get_local VALOR:a{:RESULT= new Get_local(a);:}
	|lt{:RESULT= new REL("<");:}
	|gt{:RESULT= new REL(">");:}
	|lte{:RESULT= new REL("<=");:}
	|gte{:RESULT= new REL(">=");:}
	|br identificador
	|br_if identificador
	|identificador dosPuntos;
	
	
	
VALOR::= numero_decimal:a {:RESULT = new Decimal(a);:}
	|numero_entero:a {:RESULT = new Entero(a);:}
	|dolar calc{:RESULT= new Calc();:}
	| menos numero_decimal:a{:RESULT = new Decimal("-"+a);:}
	|menos numero_entero:a{:RESULT = new Decimal("-"+a);:};





